{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"prelude":{"crate_id":{"name":"csv","disambiguator":[5395197858633498230,2345496235092155498]},"crate_root":"/home/zhi/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.0.0/src","external_crates":[{"file_name":"/home/zhi/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.0.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[15457747332785279848,2321850194859987339]}},{"file_name":"/home/zhi/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.0.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[15868474213044323624,2444462643878075336]}},{"file_name":"/home/zhi/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.0.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[8458891086083892067,8748117807113040734]}},{"file_name":"/home/zhi/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.0.0/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[767489389527341057,5235531157453730766]}},{"file_name":"/home/zhi/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.0.0/src/lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[18110415425518651545,18006836507566872508]}},{"file_name":"/home/zhi/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.0.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[7789913747131704681,15383421434934411168]}},{"file_name":"/home/zhi/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.0.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[13641195905247684855,10390215052031693935]}},{"file_name":"/home/zhi/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.0.0/src/lib.rs","num":8,"id":{"name":"alloc_jemalloc","disambiguator":[6546252056220169788,18379399819183232084]}},{"file_name":"/home/zhi/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.0.0/src/lib.rs","num":9,"id":{"name":"panic_unwind","disambiguator":[18001143091758731311,4733760878430807864]}},{"file_name":"/home/zhi/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.0.0/src/lib.rs","num":10,"id":{"name":"csv_core","disambiguator":[11143017276767579194,7353914811930090865]}},{"file_name":"/home/zhi/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.0.0/src/lib.rs","num":11,"id":{"name":"memchr","disambiguator":[1922966407542116264,10982176376012973570]}},{"file_name":"/home/zhi/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.0.0/src/lib.rs","num":12,"id":{"name":"libc","disambiguator":[9795921507606627722,5163658886396158850]}},{"file_name":"/home/zhi/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.0.0/src/lib.rs","num":13,"id":{"name":"serde","disambiguator":[10038533323072417115,6672477692422238056]}}],"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":10753,"line_start":1,"line_end":387,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":1592},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4123,"byte_end":4133,"line_start":183,"line_end":183,"column_start":23,"column_end":33},"name":"ByteRecord","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":246},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4135,"byte_end":4149,"line_start":183,"line_end":183,"column_start":35,"column_end":49},"name":"ByteRecordIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1622},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4151,"byte_end":4159,"line_start":183,"line_end":183,"column_start":51,"column_end":59},"name":"Position","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1678},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4185,"byte_end":4201,"line_start":184,"line_end":184,"column_start":24,"column_end":40},"name":"DeserializeError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1698},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4203,"byte_end":4223,"line_start":184,"line_end":184,"column_start":42,"column_end":62},"name":"DeserializeErrorKind","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1718},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4247,"byte_end":4252,"line_start":186,"line_end":186,"column_start":5,"column_end":10},"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1724},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4254,"byte_end":4263,"line_start":186,"line_end":186,"column_start":12,"column_end":21},"name":"ErrorKind","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1730},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4265,"byte_end":4278,"line_start":186,"line_end":186,"column_start":23,"column_end":36},"name":"FromUtf8Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":624},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4280,"byte_end":4294,"line_start":186,"line_end":186,"column_start":38,"column_end":52},"name":"IntoInnerError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":562},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4296,"byte_end":4302,"line_start":186,"line_end":186,"column_start":54,"column_end":60},"name":"Result","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1750},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4304,"byte_end":4313,"line_start":186,"line_end":186,"column_start":62,"column_end":71},"name":"Utf8Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1776},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4340,"byte_end":4346,"line_start":189,"line_end":189,"column_start":5,"column_end":11},"name":"Reader","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1770},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4348,"byte_end":4361,"line_start":189,"line_end":189,"column_start":13,"column_end":26},"name":"ReaderBuilder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":806},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4367,"byte_end":4393,"line_start":190,"line_end":190,"column_start":5,"column_end":31},"name":"DeserializeRecordsIntoIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":824},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4395,"byte_end":4417,"line_start":190,"line_end":190,"column_start":33,"column_end":55},"name":"DeserializeRecordsIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":840},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4423,"byte_end":4444,"line_start":191,"line_end":191,"column_start":5,"column_end":26},"name":"StringRecordsIntoIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":858},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4446,"byte_end":4463,"line_start":191,"line_end":191,"column_start":28,"column_end":45},"name":"StringRecordsIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":874},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4469,"byte_end":4488,"line_start":192,"line_end":192,"column_start":5,"column_end":24},"name":"ByteRecordsIntoIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":892},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4490,"byte_end":4505,"line_start":192,"line_end":192,"column_start":26,"column_end":41},"name":"ByteRecordsIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1794},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4534,"byte_end":4546,"line_start":194,"line_end":194,"column_start":25,"column_end":37},"name":"StringRecord","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1422},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4548,"byte_end":4564,"line_start":194,"line_end":194,"column_start":39,"column_end":55},"name":"StringRecordIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1810},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4584,"byte_end":4590,"line_start":195,"line_end":195,"column_start":18,"column_end":24},"name":"Writer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1804},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4592,"byte_end":4605,"line_start":195,"line_end":195,"column_start":26,"column_end":39},"name":"WriterBuilder","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":10753,"line_start":1,"line_end":387,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/zhi/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.0.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":18},{"krate":0,"index":26},{"krate":0,"index":32},{"krate":0,"index":46},{"krate":0,"index":64},{"krate":0,"index":70},{"krate":0,"index":76},{"krate":0,"index":272},{"krate":0,"index":540},{"krate":0,"index":648},{"krate":0,"index":650},{"krate":0,"index":908},{"krate":0,"index":1276},{"krate":0,"index":1438},{"krate":0,"index":1440},{"krate":0,"index":1834},{"krate":0,"index":1842},{"krate":0,"index":1840},{"krate":0,"index":1836},{"krate":0,"index":1564},{"krate":0,"index":1568},{"krate":0,"index":1846},{"krate":0,"index":1854},{"krate":0,"index":1852},{"krate":0,"index":1848},{"krate":0,"index":1572},{"krate":0,"index":1576},{"krate":0,"index":1858},{"krate":0,"index":1870},{"krate":0,"index":1868},{"krate":0,"index":1864},{"krate":0,"index":1860},{"krate":0,"index":1580},{"krate":0,"index":1586},{"krate":0,"index":1590}],"decl_id":null,"docs":"The `csv` crate provides a fast and flexible CSV reader and writer, with\nsupport for Serde.","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3882,"byte_end":3904,"line_start":169,"line_end":169,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":1592},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":14000,"byte_end":14010,"line_start":102,"line_end":102,"column_start":12,"column_end":22},"name":"ByteRecord","qualname":"::byte_record::ByteRecord","value":"","parent":null,"children":[],"decl_id":null,"docs":" A single CSV record stored as raw bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":16519,"byte_end":16522,"line_start":195,"line_end":195,"column_start":12,"column_end":15},"name":"new","qualname":"<ByteRecord>::new","value":"fn () -> ByteRecord","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty `ByteRecord`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":16498,"byte_end":16507,"line_start":194,"line_end":194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":16871,"byte_end":16884,"line_start":205,"line_end":205,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<ByteRecord>::with_capacity","value":"fn (buffer: usize, fields: usize) -> ByteRecord","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty `ByteRecord` with the given capacity settings.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":16850,"byte_end":16859,"line_start":204,"line_end":204,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":20167,"byte_end":20178,"line_start":302,"line_end":302,"column_start":12,"column_end":23},"name":"deserialize","qualname":"<ByteRecord>::deserialize","value":"fn <'de, D> (&'de self, headers: Option<&'de ByteRecord>) -> Result<D>","parent":null,"children":[],"decl_id":null,"docs":" Deserialize this record.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":20784,"byte_end":20788,"line_start":324,"line_end":324,"column_start":12,"column_end":16},"name":"iter","qualname":"<ByteRecord>::iter","value":"fn (&self) -> ByteRecordIter","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all fields in this record.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":20763,"byte_end":20772,"line_start":323,"line_end":323,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":21235,"byte_end":21238,"line_start":342,"line_end":342,"column_start":12,"column_end":15},"name":"get","qualname":"<ByteRecord>::get","value":"fn (&self, i: usize) -> Option<&[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Return the field at index `i`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":21214,"byte_end":21223,"line_start":341,"line_end":341,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":21571,"byte_end":21579,"line_start":356,"line_end":356,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<ByteRecord>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this record is empty.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":21550,"byte_end":21559,"line_start":355,"line_end":355,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":21898,"byte_end":21901,"line_start":371,"line_end":371,"column_start":12,"column_end":15},"name":"len","qualname":"<ByteRecord>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of fields in this record.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":21877,"byte_end":21886,"line_start":370,"line_end":370,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":22433,"byte_end":22441,"line_start":392,"line_end":392,"column_start":12,"column_end":20},"name":"truncate","qualname":"<ByteRecord>::truncate","value":"fn (&mut self, n: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Truncate this record to `n` fields.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":22412,"byte_end":22421,"line_start":391,"line_end":391,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":23050,"byte_end":23055,"line_start":416,"line_end":416,"column_start":12,"column_end":17},"name":"clear","qualname":"<ByteRecord>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear this record so that it has zero fields.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":23029,"byte_end":23038,"line_start":415,"line_end":415,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":23635,"byte_end":23639,"line_start":437,"line_end":437,"column_start":12,"column_end":16},"name":"trim","qualname":"<ByteRecord>::trim","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Trim the fields of this record so that leading and trailing whitespace\n is removed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":25176,"byte_end":25186,"line_start":485,"line_end":485,"column_start":12,"column_end":22},"name":"push_field","qualname":"<ByteRecord>::push_field","value":"fn (&mut self, field: &[u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Add a new field to this record.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":25155,"byte_end":25164,"line_start":484,"line_end":484,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":26750,"byte_end":26758,"line_start":533,"line_end":533,"column_start":12,"column_end":20},"name":"position","qualname":"<ByteRecord>::position","value":"fn (&self) -> Option<&Position>","parent":null,"children":[],"decl_id":null,"docs":" Return the position of this record, if available.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":26729,"byte_end":26738,"line_start":532,"line_end":532,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":27286,"byte_end":27298,"line_start":554,"line_end":554,"column_start":12,"column_end":24},"name":"set_position","qualname":"<ByteRecord>::set_position","value":"fn (&mut self, pos: Option<Position>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Set the position of this record.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":27265,"byte_end":27274,"line_start":553,"line_end":553,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":27911,"byte_end":27916,"line_start":574,"line_end":574,"column_start":12,"column_end":17},"name":"range","qualname":"<ByteRecord>::range","value":"fn (&self, i: usize) -> Option<Range<usize>>","parent":null,"children":[],"decl_id":null,"docs":" Return the start and end position of a field in this record.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":27890,"byte_end":27899,"line_start":573,"line_end":573,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":28430,"byte_end":28438,"line_start":591,"line_end":591,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<ByteRecord>::as_slice","value":"fn (&self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Return the entire row as a single byte slice. The slice returned stores\n all fields contiguously. The boundaries of each field can be determined\n via the `range` method.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":28409,"byte_end":28418,"line_start":590,"line_end":590,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1622},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":28905,"byte_end":28913,"line_start":605,"line_end":605,"column_start":12,"column_end":20},"name":"Position","qualname":"::byte_record::Position","value":"Position {  }","parent":null,"children":[{"krate":0,"index":685},{"krate":0,"index":687},{"krate":0,"index":689}],"decl_id":null,"docs":" A position in CSV data.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":28894,"byte_end":28964,"line_start":605,"line_end":609,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":29070,"byte_end":29073,"line_start":614,"line_end":614,"column_start":12,"column_end":15},"name":"new","qualname":"<Position>::new","value":"fn () -> Position","parent":null,"children":[],"decl_id":null,"docs":" Returns a new position initialized to the start value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":29049,"byte_end":29058,"line_start":613,"line_end":613,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":29227,"byte_end":29231,"line_start":619,"line_end":619,"column_start":22,"column_end":26},"name":"byte","qualname":"<Position>::byte","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" The byte offset, starting at `0`, of this position.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":29210,"byte_end":29219,"line_start":619,"line_end":619,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":29341,"byte_end":29345,"line_start":621,"line_end":621,"column_start":22,"column_end":26},"name":"line","qualname":"<Position>::line","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" The line number, starting at `1`, of this position.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":29324,"byte_end":29333,"line_start":621,"line_end":621,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":29460,"byte_end":29466,"line_start":623,"line_end":623,"column_start":22,"column_end":28},"name":"record","qualname":"<Position>::record","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" The record index, starting with the first record at `0`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":29443,"byte_end":29452,"line_start":623,"line_end":623,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":29569,"byte_end":29577,"line_start":627,"line_end":627,"column_start":12,"column_end":20},"name":"set_byte","qualname":"<Position>::set_byte","value":"fn (&mut self, byte: u64) -> &mut Position","parent":null,"children":[],"decl_id":null,"docs":" Set the byte offset of this position.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":29548,"byte_end":29557,"line_start":626,"line_end":626,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":29814,"byte_end":29822,"line_start":636,"line_end":636,"column_start":12,"column_end":20},"name":"set_line","qualname":"<Position>::set_line","value":"fn (&mut self, line: u64) -> &mut Position","parent":null,"children":[],"decl_id":null,"docs":" Set the line number of this position.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":29793,"byte_end":29802,"line_start":635,"line_end":635,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":30009,"byte_end":30019,"line_start":644,"line_end":644,"column_start":12,"column_end":22},"name":"set_record","qualname":"<Position>::set_record","value":"fn (&mut self, record: u64) -> &mut Position","parent":null,"children":[],"decl_id":null,"docs":" Set the record index of this position.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":29988,"byte_end":29997,"line_start":643,"line_end":643,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":246},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":33584,"byte_end":33598,"line_start":780,"line_end":780,"column_start":12,"column_end":26},"name":"ByteRecordIter","qualname":"::byte_record::ByteRecordIter","value":"ByteRecordIter {  }","parent":null,"children":[{"krate":0,"index":65},{"krate":0,"index":67},{"krate":0,"index":69},{"krate":0,"index":71},{"krate":0,"index":73}],"decl_id":null,"docs":" A double-ended iterator over the fields in a byte record.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":340},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":46273,"byte_end":46284,"line_start":72,"line_end":72,"column_start":8,"column_end":19},"name":"has_headers","qualname":"::deserializer::DeRecord::has_headers","value":"fn (&self) -> bool","parent":{"krate":0,"index":338},"children":[],"decl_id":null,"docs":" Returns true if and only if this deserialize has access to headers.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":46383,"byte_end":46394,"line_start":75,"line_end":75,"column_start":8,"column_end":19},"name":"next_header","qualname":"::deserializer::DeRecord::next_header","value":"fn (&mut self) -> Result<Option<&'r str>, DeserializeError>","parent":{"krate":0,"index":338},"children":[],"decl_id":null,"docs":" Extracts the next string header value from the underlying record.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":46536,"byte_end":46553,"line_start":78,"line_end":78,"column_start":8,"column_end":25},"name":"next_header_bytes","qualname":"::deserializer::DeRecord::next_header_bytes","value":"fn (&mut self) -> Result<Option<&'r [u8]>, DeserializeError>","parent":{"krate":0,"index":338},"children":[],"decl_id":null,"docs":" Extracts the next raw byte header value from the underlying record.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":46702,"byte_end":46712,"line_start":83,"line_end":83,"column_start":8,"column_end":18},"name":"next_field","qualname":"::deserializer::DeRecord::next_field","value":"fn (&mut self) -> Result<&'r str, DeserializeError>","parent":{"krate":0,"index":338},"children":[],"decl_id":null,"docs":" Extracts the next string field from the underlying record.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":348},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":46839,"byte_end":46855,"line_start":86,"line_end":86,"column_start":8,"column_end":24},"name":"next_field_bytes","qualname":"::deserializer::DeRecord::next_field_bytes","value":"fn (&mut self) -> Result<&'r [u8], DeserializeError>","parent":{"krate":0,"index":338},"children":[],"decl_id":null,"docs":" Extracts the next raw byte field from the underlying record.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":350},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":46974,"byte_end":46984,"line_start":89,"line_end":89,"column_start":8,"column_end":18},"name":"peek_field","qualname":"::deserializer::DeRecord::peek_field","value":"fn (&mut self) -> Option<&'r [u8]>","parent":{"krate":0,"index":338},"children":[],"decl_id":null,"docs":" Peeks at the next field from the underlying record.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":352},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":47102,"byte_end":47107,"line_start":92,"line_end":92,"column_start":8,"column_end":13},"name":"error","qualname":"::deserializer::DeRecord::error","value":"fn (&self, kind: DeserializeErrorKind) -> DeserializeError","parent":{"krate":0,"index":338},"children":[],"decl_id":null,"docs":" Returns an error corresponding to the most recently extracted field.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":354},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":47233,"byte_end":47250,"line_start":95,"line_end":95,"column_start":8,"column_end":25},"name":"infer_deserialize","qualname":"::deserializer::DeRecord::infer_deserialize","value":"fn <'de, V> (&mut self, visitor: V) -> Result<V::Value, DeserializeError>","parent":{"krate":0,"index":338},"children":[],"decl_id":null,"docs":" Infer the type of the next field and deserialize it.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1678},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":61605,"byte_end":61621,"line_start":628,"line_end":628,"column_start":12,"column_end":28},"name":"DeserializeError","qualname":"::deserializer::DeserializeError","value":"DeserializeError {  }","parent":null,"children":[{"krate":0,"index":727},{"krate":0,"index":729}],"decl_id":null,"docs":" An Serde deserialization error.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":61594,"byte_end":61681,"line_start":628,"line_end":631,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":731},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":61852,"byte_end":61859,"line_start":637,"line_end":637,"column_start":5,"column_end":12},"name":"Message","qualname":"::deserializer::DeserializeErrorKind::Message","value":"DeserializeErrorKind::Message(String)","parent":{"krate":0,"index":1698},"children":[],"decl_id":null,"docs":" A generic Serde deserialization error.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":735},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":61916,"byte_end":61927,"line_start":639,"line_end":639,"column_start":5,"column_end":16},"name":"Unsupported","qualname":"::deserializer::DeserializeErrorKind::Unsupported","value":"DeserializeErrorKind::Unsupported(String)","parent":{"krate":0,"index":1698},"children":[],"decl_id":null,"docs":" A generic Serde unsupported error.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":739},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":62062,"byte_end":62080,"line_start":642,"line_end":642,"column_start":5,"column_end":23},"name":"UnexpectedEndOfRow","qualname":"::deserializer::DeserializeErrorKind::UnexpectedEndOfRow","value":"DeserializeErrorKind::UnexpectedEndOfRow","parent":{"krate":0,"index":1698},"children":[],"decl_id":null,"docs":" This error occurs when a Rust type expects to decode another field\n from a row, but no more fields exist.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":741},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":62269,"byte_end":62280,"line_start":646,"line_end":646,"column_start":5,"column_end":16},"name":"InvalidUtf8","qualname":"::deserializer::DeserializeErrorKind::InvalidUtf8","value":"DeserializeErrorKind::InvalidUtf8(str::Utf8Error)","parent":{"krate":0,"index":1698},"children":[],"decl_id":null,"docs":" This error occurs when UTF-8 validation on a field fails. UTF-8\n validation is only performed when the Rust type requires it (e.g.,\n a `String` or `&str` type).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":745},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":62365,"byte_end":62374,"line_start":648,"line_end":648,"column_start":5,"column_end":14},"name":"ParseBool","qualname":"::deserializer::DeserializeErrorKind::ParseBool","value":"DeserializeErrorKind::ParseBool(str::ParseBoolError)","parent":{"krate":0,"index":1698},"children":[],"decl_id":null,"docs":" This error occurs when a boolean value fails to parse.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":749},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":62465,"byte_end":62473,"line_start":650,"line_end":650,"column_start":5,"column_end":13},"name":"ParseInt","qualname":"::deserializer::DeserializeErrorKind::ParseInt","value":"DeserializeErrorKind::ParseInt(num::ParseIntError)","parent":{"krate":0,"index":1698},"children":[],"decl_id":null,"docs":" This error occurs when an integer value fails to parse.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":753},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":62560,"byte_end":62570,"line_start":652,"line_end":652,"column_start":5,"column_end":15},"name":"ParseFloat","qualname":"::deserializer::DeserializeErrorKind::ParseFloat","value":"DeserializeErrorKind::ParseFloat(num::ParseFloatError)","parent":{"krate":0,"index":1698},"children":[],"decl_id":null,"docs":" This error occurs when a float value fails to parse.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1698},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":61778,"byte_end":61798,"line_start":635,"line_end":635,"column_start":10,"column_end":30},"name":"DeserializeErrorKind","qualname":"::deserializer::DeserializeErrorKind","value":"DeserializeErrorKind::{Message, Unsupported, UnexpectedEndOfRow, InvalidUtf8, ParseBool, ParseInt, ParseFloat}","parent":null,"children":[{"krate":0,"index":731},{"krate":0,"index":735},{"krate":0,"index":739},{"krate":0,"index":741},{"krate":0,"index":745},{"krate":0,"index":749},{"krate":0,"index":753}],"decl_id":null,"docs":" The type of a Serde deserialization error.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":61769,"byte_end":62595,"line_start":635,"line_end":653,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":63941,"byte_end":63946,"line_start":700,"line_end":700,"column_start":12,"column_end":17},"name":"field","qualname":"<DeserializeError>::field","value":"fn (&self) -> Option<u64>","parent":null,"children":[],"decl_id":null,"docs":" Return the field index (starting at 0) of this error, if available.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":520},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":64050,"byte_end":64054,"line_start":705,"line_end":705,"column_start":12,"column_end":16},"name":"kind","qualname":"<DeserializeError>::kind","value":"fn (&self) -> &DeserializeErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying error kind.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":562},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":75304,"byte_end":75310,"line_start":17,"line_end":17,"column_start":10,"column_end":16},"name":"Result","qualname":"::error::Result","value":"result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" A type alias for `Result<T, csv::Error>`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1718},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":75751,"byte_end":75756,"line_start":28,"line_end":28,"column_start":12,"column_end":17},"name":"Error","qualname":"::error::Error","value":"","parent":null,"children":[],"decl_id":null,"docs":" An error that can occur when processing CSV data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":566},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":75847,"byte_end":75851,"line_start":32,"line_end":32,"column_start":12,"column_end":16},"name":"kind","qualname":"<Error>::kind","value":"fn (&self) -> &ErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Return the specific type of this error.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":568},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":75961,"byte_end":75970,"line_start":37,"line_end":37,"column_start":12,"column_end":21},"name":"into_kind","qualname":"<Error>::into_kind","value":"fn (self) -> ErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Unwrap this error into its underlying type.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":570},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":76177,"byte_end":76188,"line_start":45,"line_end":45,"column_start":12,"column_end":23},"name":"is_io_error","qualname":"<Error>::is_io_error","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this is an I/O error.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":761},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":76447,"byte_end":76449,"line_start":57,"line_end":57,"column_start":5,"column_end":7},"name":"Io","qualname":"::error::ErrorKind::Io","value":"ErrorKind::Io(io::Error)","parent":{"krate":0,"index":1724},"children":[],"decl_id":null,"docs":" An I/O error that occurred while reading CSV data.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":765},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":76562,"byte_end":76566,"line_start":60,"line_end":60,"column_start":5,"column_end":9},"name":"Utf8","qualname":"::error::ErrorKind::Utf8","value":"ErrorKind::Utf8 { pos, err }","parent":{"krate":0,"index":1724},"children":[],"decl_id":null,"docs":" A UTF-8 decoding error that occured while reading CSV data into Rust\n `String`s.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":771},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":76962,"byte_end":76976,"line_start":70,"line_end":70,"column_start":5,"column_end":19},"name":"UnequalLengths","qualname":"::error::ErrorKind::UnequalLengths","value":"ErrorKind::UnequalLengths { pos, expected_len, len }","parent":{"krate":0,"index":1724},"children":[],"decl_id":null,"docs":" This error occurs when two records with an unequal number of fields\n are found. This error only occurs when the `flexible` option in a\n CSV reader/writer is disabled.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":779},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":77594,"byte_end":77598,"line_start":84,"line_end":84,"column_start":5,"column_end":9},"name":"Seek","qualname":"::error::ErrorKind::Seek","value":"ErrorKind::Seek","parent":{"krate":0,"index":1724},"children":[],"decl_id":null,"docs":" This error occurs when either the `byte_headers` or `headers` methods\n are called on a CSV reader that was asked to `seek` before it parsed\n the first record.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":781},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":77679,"byte_end":77688,"line_start":86,"line_end":86,"column_start":5,"column_end":14},"name":"Serialize","qualname":"::error::ErrorKind::Serialize","value":"ErrorKind::Serialize(String)","parent":{"krate":0,"index":1724},"children":[],"decl_id":null,"docs":" An error of this kind occurs only when using the Serde serializer.\n","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":785},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":77806,"byte_end":77817,"line_start":89,"line_end":89,"column_start":5,"column_end":16},"name":"Deserialize","qualname":"::error::ErrorKind::Deserialize","value":"ErrorKind::Deserialize { pos, err }","parent":{"krate":0,"index":1724},"children":[],"decl_id":null,"docs":" An error of this kind occurs only when performing automatic\n deserialization with serde.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":791},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":78260,"byte_end":78275,"line_start":101,"line_end":101,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::error::ErrorKind::__Nonexhaustive","value":"ErrorKind::__Nonexhaustive","parent":{"krate":0,"index":1724},"children":[],"decl_id":null,"docs":" Hints that destructuring should not be exhaustive.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1724},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":76372,"byte_end":76381,"line_start":55,"line_end":55,"column_start":10,"column_end":19},"name":"ErrorKind","qualname":"::error::ErrorKind","value":"ErrorKind::{Io, Utf8, UnequalLengths, Seek, Serialize, Deserialize, __Nonexhaustive}","parent":null,"children":[{"krate":0,"index":761},{"krate":0,"index":765},{"krate":0,"index":771},{"krate":0,"index":779},{"krate":0,"index":781},{"krate":0,"index":785},{"krate":0,"index":791}],"decl_id":null,"docs":" The specific type of an error.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1730},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":81879,"byte_end":81892,"line_start":200,"line_end":200,"column_start":12,"column_end":25},"name":"FromUtf8Error","qualname":"::error::FromUtf8Error","value":"FromUtf8Error {  }","parent":null,"children":[{"krate":0,"index":793},{"krate":0,"index":795}],"decl_id":null,"docs":" A UTF-8 validation error during record conversion.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":81868,"byte_end":81940,"line_start":200,"line_end":203,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":82205,"byte_end":82221,"line_start":212,"line_end":212,"column_start":12,"column_end":28},"name":"into_byte_record","qualname":"<FromUtf8Error>::into_byte_record","value":"fn (self) -> ByteRecord","parent":null,"children":[],"decl_id":null,"docs":" Access the underlying `ByteRecord` that failed UTF-8 validation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":596},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":82336,"byte_end":82346,"line_start":217,"line_end":217,"column_start":12,"column_end":22},"name":"utf8_error","qualname":"<FromUtf8Error>::utf8_error","value":"fn (&self) -> &Utf8Error","parent":null,"children":[],"decl_id":null,"docs":" Access the underlying UTF-8 validation error.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1750},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":82986,"byte_end":82995,"line_start":241,"line_end":241,"column_start":12,"column_end":21},"name":"Utf8Error","qualname":"::error::Utf8Error","value":"Utf8Error {  }","parent":null,"children":[{"krate":0,"index":797},{"krate":0,"index":799}],"decl_id":null,"docs":" A UTF-8 validation error.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":82975,"byte_end":83193,"line_start":241,"line_end":246,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":612},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":83459,"byte_end":83464,"line_start":255,"line_end":255,"column_start":12,"column_end":17},"name":"field","qualname":"<Utf8Error>::field","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The field index of a byte record in which UTF-8 validation failed.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":614},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":83584,"byte_end":83595,"line_start":257,"line_end":257,"column_start":12,"column_end":23},"name":"valid_up_to","qualname":"<Utf8Error>::valid_up_to","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The index into the given field up to which valid UTF-8 was verified.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":624},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":84313,"byte_end":84327,"line_start":281,"line_end":281,"column_start":12,"column_end":26},"name":"IntoInnerError","qualname":"::error::IntoInnerError","value":"IntoInnerError {  }","parent":null,"children":[{"krate":0,"index":281},{"krate":0,"index":283}],"decl_id":null,"docs":" `IntoInnerError` occurs when consuming a `Writer` fails.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":630},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":84816,"byte_end":84821,"line_start":298,"line_end":298,"column_start":12,"column_end":17},"name":"error","qualname":"<IntoInnerError<W>>::error","value":"fn (&self) -> &io::Error","parent":null,"children":[],"decl_id":null,"docs":" Returns the error which caused the call to `into_inner` to fail.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":632},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":85055,"byte_end":85065,"line_start":306,"line_end":306,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<IntoInnerError<W>>::into_inner","value":"fn (self) -> W","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying writer which generated the error.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":648},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,99,111,111,107,98,111,111,107,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"cookbook","qualname":"::cookbook","value":"/home/zhi/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.0.0/src/cookbook.rs","parent":null,"children":[],"decl_id":null,"docs":"A cookbook of examples for CSV reading and writing.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1770},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":93483,"byte_end":93496,"line_start":23,"line_end":23,"column_start":12,"column_end":25},"name":"ReaderBuilder","qualname":"::reader::ReaderBuilder","value":"ReaderBuilder {  }","parent":null,"children":[{"krate":0,"index":801},{"krate":0,"index":803},{"krate":0,"index":805},{"krate":0,"index":807},{"krate":0,"index":809}],"decl_id":null,"docs":" Builds a CSV reader with various configuration knobs.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":712},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":95191,"byte_end":95194,"line_start":81,"line_end":81,"column_start":12,"column_end":15},"name":"new","qualname":"<ReaderBuilder>::new","value":"fn () -> ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" Create a new builder for configuring CSV parsing.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":714},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":95991,"byte_end":96000,"line_start":109,"line_end":109,"column_start":12,"column_end":21},"name":"from_path","qualname":"<ReaderBuilder>::from_path","value":"fn <P> (&self, path: P) -> Result<Reader<File>>","parent":null,"children":[],"decl_id":null,"docs":" Build a CSV parser from this configuration that reads data from the\n given file path.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":716},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":96986,"byte_end":96997,"line_start":141,"line_end":141,"column_start":12,"column_end":23},"name":"from_reader","qualname":"<ReaderBuilder>::from_reader","value":"fn <R> (&self, rdr: R) -> Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Build a CSV parser from this configuration that reads data from `rdr`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":718},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":97992,"byte_end":98001,"line_start":176,"line_end":176,"column_start":12,"column_end":21},"name":"delimiter","qualname":"<ReaderBuilder>::delimiter","value":"fn (&mut self, delimiter: u8) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" The field delimiter to use when parsing CSV.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":720},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":100027,"byte_end":100038,"line_start":233,"line_end":233,"column_start":12,"column_end":23},"name":"has_headers","qualname":"<ReaderBuilder>::has_headers","value":"fn (&mut self, yes: bool) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" Whether to treat the first row as a special header row.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":722},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":102991,"byte_end":102999,"line_start":319,"line_end":319,"column_start":12,"column_end":20},"name":"flexible","qualname":"<ReaderBuilder>::flexible","value":"fn (&mut self, yes: bool) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" Whether the number of fields in records is allowed to change or not.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":724},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":104954,"byte_end":104958,"line_start":372,"line_end":372,"column_start":12,"column_end":16},"name":"trim","qualname":"<ReaderBuilder>::trim","value":"fn (&mut self, trim: Trim) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" Whether fields are trimmed of leading and trailing whitespace or not.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":726},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":106172,"byte_end":106182,"line_start":407,"line_end":407,"column_start":12,"column_end":22},"name":"terminator","qualname":"<ReaderBuilder>::terminator","value":"fn (&mut self, term: Terminator) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" The record terminator to use when parsing CSV.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":728},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":107280,"byte_end":107285,"line_start":446,"line_end":446,"column_start":12,"column_end":17},"name":"quote","qualname":"<ReaderBuilder>::quote","value":"fn (&mut self, quote: u8) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" The quote character to use when parsing CSV.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":730},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":108567,"byte_end":108573,"line_start":487,"line_end":487,"column_start":12,"column_end":18},"name":"escape","qualname":"<ReaderBuilder>::escape","value":"fn (&mut self, escape: Option<u8>) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" The escape character to use when parsing CSV.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":732},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":109753,"byte_end":109765,"line_start":526,"line_end":526,"column_start":12,"column_end":24},"name":"double_quote","qualname":"<ReaderBuilder>::double_quote","value":"fn (&mut self, yes: bool) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable double quote escapes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":734},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":110903,"byte_end":110910,"line_start":565,"line_end":565,"column_start":12,"column_end":19},"name":"quoting","qualname":"<ReaderBuilder>::quoting","value":"fn (&mut self, yes: bool) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable or disable quoting.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":736},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":112101,"byte_end":112108,"line_start":605,"line_end":605,"column_start":12,"column_end":19},"name":"comment","qualname":"<ReaderBuilder>::comment","value":"fn (&mut self, comment: Option<u8>) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" The comment character to use when parsing CSV.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":738},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":113285,"byte_end":113290,"line_start":641,"line_end":641,"column_start":12,"column_end":17},"name":"ascii","qualname":"<ReaderBuilder>::ascii","value":"fn (&mut self) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" A convenience method for specifying a configuration to read ASCII\n delimited text.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":740},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":113508,"byte_end":113523,"line_start":648,"line_end":648,"column_start":12,"column_end":27},"name":"buffer_capacity","qualname":"<ReaderBuilder>::buffer_capacity","value":"fn (&mut self, capacity: usize) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" Set the capacity (in bytes) of the buffer used in the CSV reader.\n This defaults to a reasonable setting.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":742},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":113813,"byte_end":113816,"line_start":658,"line_end":658,"column_start":12,"column_end":15},"name":"nfa","qualname":"<ReaderBuilder>::nfa","value":"fn (&mut self, yes: bool) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable or disable the NFA for parsing CSV.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1776},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":117445,"byte_end":117451,"line_start":740,"line_end":740,"column_start":12,"column_end":18},"name":"Reader","qualname":"::reader::Reader","value":"Reader {  }","parent":null,"children":[{"krate":0,"index":811},{"krate":0,"index":813},{"krate":0,"index":815}],"decl_id":null,"docs":" A already configured CSV reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":746},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":120057,"byte_end":120066,"line_start":819,"line_end":819,"column_start":12,"column_end":21},"name":"from_path","qualname":"<Reader<Reader<File>>>::from_path","value":"fn <P> (path: P) -> Result<Reader<File>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new CSV parser with a default configuration for the given\n file path.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":752},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":121669,"byte_end":121680,"line_start":873,"line_end":873,"column_start":12,"column_end":23},"name":"from_reader","qualname":"<Reader<R>>::from_reader","value":"fn (rdr: R) -> Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new CSV parser with a default configuration for the given\n reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":754},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":128705,"byte_end":128716,"line_start":1067,"line_end":1067,"column_start":12,"column_end":23},"name":"deserialize","qualname":"<Reader<R>>::deserialize","value":"fn <D> (&mut self) -> DeserializeRecordsIter<R, D>","parent":null,"children":[],"decl_id":null,"docs":" Returns a borrowed iterator over deserialized records.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":756},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":130896,"byte_end":130912,"line_start":1131,"line_end":1131,"column_start":12,"column_end":28},"name":"into_deserialize","qualname":"<Reader<R>>::into_deserialize","value":"fn <D> (self) -> DeserializeRecordsIntoIter<R, D>","parent":null,"children":[],"decl_id":null,"docs":" Returns an owned iterator over deserialized records.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":758},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":132270,"byte_end":132277,"line_start":1172,"line_end":1172,"column_start":12,"column_end":19},"name":"records","qualname":"<Reader<R>>::records","value":"fn (&mut self) -> StringRecordsIter<R>","parent":null,"children":[],"decl_id":null,"docs":" Returns a borrowed iterator over all records as strings.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":760},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":133681,"byte_end":133693,"line_start":1214,"line_end":1214,"column_start":12,"column_end":24},"name":"into_records","qualname":"<Reader<R>>::into_records","value":"fn (self) -> StringRecordsIntoIter<R>","parent":null,"children":[],"decl_id":null,"docs":" Returns an owned iterator over all records as strings.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":762},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":134998,"byte_end":135010,"line_start":1253,"line_end":1253,"column_start":12,"column_end":24},"name":"byte_records","qualname":"<Reader<R>>::byte_records","value":"fn (&mut self) -> ByteRecordsIter<R>","parent":null,"children":[],"decl_id":null,"docs":" Returns a borrowed iterator over all records as raw bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":764},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":136415,"byte_end":136432,"line_start":1295,"line_end":1295,"column_start":12,"column_end":29},"name":"into_byte_records","qualname":"<Reader<R>>::into_byte_records","value":"fn (self) -> ByteRecordsIntoIter<R>","parent":null,"children":[],"decl_id":null,"docs":" Returns an owned iterator over all records as raw bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":766},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":138586,"byte_end":138593,"line_start":1355,"line_end":1355,"column_start":12,"column_end":19},"name":"headers","qualname":"<Reader<R>>::headers","value":"fn (&mut self) -> Result<&StringRecord>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the first row read by this parser.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":768},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":141237,"byte_end":141249,"line_start":1426,"line_end":1426,"column_start":12,"column_end":24},"name":"byte_headers","qualname":"<Reader<R>>::byte_headers","value":"fn (&mut self) -> Result<&ByteRecord>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the first row read by this parser as raw bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":770},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":142474,"byte_end":142485,"line_start":1464,"line_end":1464,"column_start":12,"column_end":23},"name":"set_headers","qualname":"<Reader<R>>::set_headers","value":"fn (&mut self, headers: StringRecord) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Set the headers of this CSV parser manually.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":772},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":143509,"byte_end":143525,"line_start":1497,"line_end":1497,"column_start":12,"column_end":28},"name":"set_byte_headers","qualname":"<Reader<R>>::set_byte_headers","value":"fn (&mut self, headers: ByteRecord) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Set the headers of this CSV parser manually as raw bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":776},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":146151,"byte_end":146162,"line_start":1570,"line_end":1570,"column_start":12,"column_end":23},"name":"read_record","qualname":"<Reader<R>>::read_record","value":"fn (&mut self, record: &mut StringRecord) -> Result<bool>","parent":null,"children":[],"decl_id":null,"docs":" Read a single row into the given record. Returns false when no more\n records could be read.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":778},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":147998,"byte_end":148014,"line_start":1620,"line_end":1620,"column_start":12,"column_end":28},"name":"read_byte_record","qualname":"<Reader<R>>::read_byte_record","value":"fn (&mut self, record: &mut ByteRecord) -> Result<bool>","parent":null,"children":[],"decl_id":null,"docs":" Read a single row into the given byte record. Returns false when no\n more records could be read.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":784},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":152630,"byte_end":152638,"line_start":1751,"line_end":1751,"column_start":12,"column_end":20},"name":"position","qualname":"<Reader<R>>::position","value":"fn (&self) -> &Position","parent":null,"children":[],"decl_id":null,"docs":" Return the current position of this CSV reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":786},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":153600,"byte_end":153607,"line_start":1785,"line_end":1785,"column_start":12,"column_end":19},"name":"is_done","qualname":"<Reader<R>>::is_done","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this reader has been exhausted.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":788},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":153792,"byte_end":153803,"line_start":1791,"line_end":1791,"column_start":12,"column_end":23},"name":"has_headers","qualname":"<Reader<R>>::has_headers","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this reader has been configured to\n interpret the first record as a header record.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":790},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":153924,"byte_end":153931,"line_start":1796,"line_end":1796,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Reader<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":792},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":154054,"byte_end":154061,"line_start":1801,"line_end":1801,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Reader<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":794},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":154294,"byte_end":154304,"line_start":1809,"line_end":1809,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Reader<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Unwraps this CSV reader, returning the underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":798},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":156978,"byte_end":156982,"line_start":1879,"line_end":1879,"column_start":12,"column_end":16},"name":"seek","qualname":"<Reader<R>>::seek","value":"fn (&mut self, pos: Position) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Seeks the underlying reader to the position given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":800},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":158121,"byte_end":158129,"line_start":1906,"line_end":1906,"column_start":12,"column_end":20},"name":"seek_raw","qualname":"<Reader<R>>::seek_raw","value":"fn (&mut self, seek_from: io::SeekFrom, pos: Position) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" This is like `seek`, but provides direct control over how the seeking\n operation is performed via `io::SeekFrom`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":806},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":159511,"byte_end":159537,"line_start":1949,"line_end":1949,"column_start":12,"column_end":38},"name":"DeserializeRecordsIntoIter","qualname":"::reader::DeserializeRecordsIntoIter","value":"DeserializeRecordsIntoIter {  }","parent":null,"children":[{"krate":0,"index":311},{"krate":0,"index":313},{"krate":0,"index":315},{"krate":0,"index":317}],"decl_id":null,"docs":" An owned iterator over deserialized records.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":812},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":160213,"byte_end":160219,"line_start":1973,"line_end":1973,"column_start":12,"column_end":18},"name":"reader","qualname":"<DeserializeRecordsIntoIter<R, D>>::reader","value":"fn (&self) -> &Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the underlying CSV reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":814},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":160344,"byte_end":160354,"line_start":1978,"line_end":1978,"column_start":12,"column_end":22},"name":"reader_mut","qualname":"<DeserializeRecordsIntoIter<R, D>>::reader_mut","value":"fn (&mut self) -> &mut Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to the underlying CSV reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":816},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":160491,"byte_end":160502,"line_start":1983,"line_end":1983,"column_start":12,"column_end":23},"name":"into_reader","qualname":"<DeserializeRecordsIntoIter<R, D>>::into_reader","value":"fn (self) -> Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Drop this iterator and return the underlying CSV reader.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":824},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":161240,"byte_end":161262,"line_start":2008,"line_end":2008,"column_start":12,"column_end":34},"name":"DeserializeRecordsIter","qualname":"::reader::DeserializeRecordsIter","value":"DeserializeRecordsIter {  }","parent":null,"children":[{"krate":0,"index":331},{"krate":0,"index":333},{"krate":0,"index":335},{"krate":0,"index":337}],"decl_id":null,"docs":" A borrowed iterator over deserialized records.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":830},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":161958,"byte_end":161964,"line_start":2032,"line_end":2032,"column_start":12,"column_end":18},"name":"reader","qualname":"<DeserializeRecordsIter<'r, R, D>>::reader","value":"fn (&self) -> &Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the underlying CSV reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":832},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":162089,"byte_end":162099,"line_start":2037,"line_end":2037,"column_start":12,"column_end":22},"name":"reader_mut","qualname":"<DeserializeRecordsIter<'r, R, D>>::reader_mut","value":"fn (&mut self) -> &mut Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to the underlying CSV reader.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":840},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":162606,"byte_end":162627,"line_start":2057,"line_end":2057,"column_start":12,"column_end":33},"name":"StringRecordsIntoIter","qualname":"::reader::StringRecordsIntoIter","value":"StringRecordsIntoIter {  }","parent":null,"children":[{"krate":0,"index":357},{"krate":0,"index":359}],"decl_id":null,"docs":" An owned iterator over records as strings.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":846},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":162925,"byte_end":162931,"line_start":2068,"line_end":2068,"column_start":12,"column_end":18},"name":"reader","qualname":"<StringRecordsIntoIter<R>>::reader","value":"fn (&self) -> &Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the underlying CSV reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":848},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":163056,"byte_end":163066,"line_start":2073,"line_end":2073,"column_start":12,"column_end":22},"name":"reader_mut","qualname":"<StringRecordsIntoIter<R>>::reader_mut","value":"fn (&mut self) -> &mut Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to the underlying CSV reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":850},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":163203,"byte_end":163214,"line_start":2078,"line_end":2078,"column_start":12,"column_end":23},"name":"into_reader","qualname":"<StringRecordsIntoIter<R>>::into_reader","value":"fn (self) -> Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Drop this iterator and return the underlying CSV reader.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":858},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":163765,"byte_end":163782,"line_start":2099,"line_end":2099,"column_start":12,"column_end":29},"name":"StringRecordsIter","qualname":"::reader::StringRecordsIter","value":"StringRecordsIter {  }","parent":null,"children":[{"krate":0,"index":367},{"krate":0,"index":369}],"decl_id":null,"docs":" A borrowed iterator over records as strings.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":864},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":164104,"byte_end":164110,"line_start":2110,"line_end":2110,"column_start":12,"column_end":18},"name":"reader","qualname":"<StringRecordsIter<'r, R>>::reader","value":"fn (&self) -> &Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the underlying CSV reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":866},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":164235,"byte_end":164245,"line_start":2115,"line_end":2115,"column_start":12,"column_end":22},"name":"reader_mut","qualname":"<StringRecordsIter<'r, R>>::reader_mut","value":"fn (&mut self) -> &mut Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to the underlying CSV reader.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":874},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":164720,"byte_end":164739,"line_start":2133,"line_end":2133,"column_start":12,"column_end":31},"name":"ByteRecordsIntoIter","qualname":"::reader::ByteRecordsIntoIter","value":"ByteRecordsIntoIter {  }","parent":null,"children":[{"krate":0,"index":383},{"krate":0,"index":385}],"decl_id":null,"docs":" An owned iterator over records as raw bytes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":880},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":165027,"byte_end":165033,"line_start":2144,"line_end":2144,"column_start":12,"column_end":18},"name":"reader","qualname":"<ByteRecordsIntoIter<R>>::reader","value":"fn (&self) -> &Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the underlying CSV reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":882},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":165158,"byte_end":165168,"line_start":2149,"line_end":2149,"column_start":12,"column_end":22},"name":"reader_mut","qualname":"<ByteRecordsIntoIter<R>>::reader_mut","value":"fn (&mut self) -> &mut Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to the underlying CSV reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":884},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":165305,"byte_end":165316,"line_start":2154,"line_end":2154,"column_start":12,"column_end":23},"name":"into_reader","qualname":"<ByteRecordsIntoIter<R>>::into_reader","value":"fn (self) -> Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Drop this iterator and return the underlying CSV reader.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":892},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":165868,"byte_end":165883,"line_start":2175,"line_end":2175,"column_start":12,"column_end":27},"name":"ByteRecordsIter","qualname":"::reader::ByteRecordsIter","value":"ByteRecordsIter {  }","parent":null,"children":[{"krate":0,"index":393},{"krate":0,"index":395}],"decl_id":null,"docs":" A borrowed iterator over records as raw bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":898},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":166195,"byte_end":166201,"line_start":2186,"line_end":2186,"column_start":12,"column_end":18},"name":"reader","qualname":"<ByteRecordsIter<'r, R>>::reader","value":"fn (&self) -> &Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the underlying CSV reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":900},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":166326,"byte_end":166336,"line_start":2191,"line_end":2191,"column_start":12,"column_end":22},"name":"reader_mut","qualname":"<ByteRecordsIter<'r, R>>::reader_mut","value":"fn (&mut self) -> &mut Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to the underlying CSV reader.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1794},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":220163,"byte_end":220175,"line_start":67,"line_end":67,"column_start":12,"column_end":24},"name":"StringRecord","qualname":"::string_record::StringRecord","value":"","parent":null,"children":[],"decl_id":null,"docs":" A single CSV record stored as valid UTF-8 bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1354},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":221923,"byte_end":221926,"line_start":137,"line_end":137,"column_start":12,"column_end":15},"name":"new","qualname":"<StringRecord>::new","value":"fn () -> StringRecord","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty `StringRecord`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":221902,"byte_end":221911,"line_start":136,"line_end":136,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1356},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":222270,"byte_end":222283,"line_start":147,"line_end":147,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<StringRecord>::with_capacity","value":"fn (buffer: usize, fields: usize) -> StringRecord","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty `StringRecord` with the given capacity.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":222249,"byte_end":222258,"line_start":146,"line_end":146,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1358},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":223629,"byte_end":223645,"line_start":187,"line_end":187,"column_start":12,"column_end":28},"name":"from_byte_record","qualname":"<StringRecord>::from_byte_record","value":"fn (record: ByteRecord) -> result::Result<StringRecord, FromUtf8Error>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `StringRecord` from a `ByteRecord`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":223608,"byte_end":223617,"line_start":186,"line_end":186,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1360},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":224951,"byte_end":224973,"line_start":226,"line_end":226,"column_start":12,"column_end":34},"name":"from_byte_record_lossy","qualname":"<StringRecord>::from_byte_record_lossy","value":"fn (record: ByteRecord) -> StringRecord","parent":null,"children":[],"decl_id":null,"docs":" Lossily create a new `StringRecord` from a `ByteRecord`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":224930,"byte_end":224939,"line_start":225,"line_end":225,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1362},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":228572,"byte_end":228583,"line_start":329,"line_end":329,"column_start":12,"column_end":23},"name":"deserialize","qualname":"<StringRecord>::deserialize","value":"fn <'de, D> (&'de self, headers: Option<&'de StringRecord>) -> Result<D>","parent":null,"children":[],"decl_id":null,"docs":" Deserialize this record.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1364},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":229196,"byte_end":229200,"line_start":351,"line_end":351,"column_start":12,"column_end":16},"name":"iter","qualname":"<StringRecord>::iter","value":"fn (&self) -> StringRecordIter","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all fields in this record.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":229175,"byte_end":229184,"line_start":350,"line_end":350,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1366},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":229647,"byte_end":229650,"line_start":369,"line_end":369,"column_start":12,"column_end":15},"name":"get","qualname":"<StringRecord>::get","value":"fn (&self, i: usize) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":" Return the field at index `i`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":229626,"byte_end":229635,"line_start":368,"line_end":368,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1368},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":230227,"byte_end":230235,"line_start":388,"line_end":388,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<StringRecord>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this record is empty.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":230206,"byte_end":230215,"line_start":387,"line_end":387,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1370},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":230558,"byte_end":230561,"line_start":403,"line_end":403,"column_start":12,"column_end":15},"name":"len","qualname":"<StringRecord>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of fields in this record.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":230537,"byte_end":230546,"line_start":402,"line_end":402,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1372},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":231090,"byte_end":231098,"line_start":424,"line_end":424,"column_start":12,"column_end":20},"name":"truncate","qualname":"<StringRecord>::truncate","value":"fn (&mut self, n: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Truncate this record to `n` fields.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":231069,"byte_end":231078,"line_start":423,"line_end":423,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1374},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":231604,"byte_end":231609,"line_start":444,"line_end":444,"column_start":12,"column_end":17},"name":"clear","qualname":"<StringRecord>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear this record so that it has zero fields.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":231583,"byte_end":231592,"line_start":443,"line_end":443,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1376},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":232132,"byte_end":232136,"line_start":464,"line_end":464,"column_start":12,"column_end":16},"name":"trim","qualname":"<StringRecord>::trim","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Trim the fields of this record so that leading and trailing whitespace\n is removed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1378},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":232821,"byte_end":232831,"line_start":490,"line_end":490,"column_start":12,"column_end":22},"name":"push_field","qualname":"<StringRecord>::push_field","value":"fn (&mut self, field: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Add a new field to this record.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":232800,"byte_end":232809,"line_start":489,"line_end":489,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1380},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":234184,"byte_end":234192,"line_start":533,"line_end":533,"column_start":12,"column_end":20},"name":"position","qualname":"<StringRecord>::position","value":"fn (&self) -> Option<&Position>","parent":null,"children":[],"decl_id":null,"docs":" Return the position of this record, if available.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":234163,"byte_end":234172,"line_start":532,"line_end":532,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1382},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":234722,"byte_end":234734,"line_start":554,"line_end":554,"column_start":12,"column_end":24},"name":"set_position","qualname":"<StringRecord>::set_position","value":"fn (&mut self, pos: Option<Position>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Set the position of this record.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":234701,"byte_end":234710,"line_start":553,"line_end":553,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1384},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":235463,"byte_end":235468,"line_start":576,"line_end":576,"column_start":12,"column_end":17},"name":"range","qualname":"<StringRecord>::range","value":"fn (&self, i: usize) -> Option<Range<usize>>","parent":null,"children":[],"decl_id":null,"docs":" Return the start and end position of a field in this record.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":235442,"byte_end":235451,"line_start":575,"line_end":575,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1386},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":235977,"byte_end":235985,"line_start":593,"line_end":593,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<StringRecord>::as_slice","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Return the entire row as a single string slice. The slice returned\n stores all fields contiguously. The boundaries of each field can be\n determined via the `range` method.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":235956,"byte_end":235965,"line_start":592,"line_end":592,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1388},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":236667,"byte_end":236681,"line_start":613,"line_end":613,"column_start":12,"column_end":26},"name":"as_byte_record","qualname":"<StringRecord>::as_byte_record","value":"fn (&self) -> &ByteRecord","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to this record's raw\n [`ByteRecord`](struct.ByteRecord.html).","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":236646,"byte_end":236655,"line_start":612,"line_end":612,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1390},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":237642,"byte_end":237658,"line_start":645,"line_end":645,"column_start":12,"column_end":28},"name":"into_byte_record","qualname":"<StringRecord>::into_byte_record","value":"fn (self) -> ByteRecord","parent":null,"children":[],"decl_id":null,"docs":" Convert this `StringRecord` into a\n [`ByteRecord`](struct.ByteRecord.html).","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":237621,"byte_end":237630,"line_start":644,"line_end":644,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1422},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":239020,"byte_end":239036,"line_start":702,"line_end":702,"column_start":12,"column_end":28},"name":"StringRecordIter","qualname":"::string_record::StringRecordIter","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the fields in a string record.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1438},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,116,117,116,111,114,105,97,108,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"tutorial","qualname":"::tutorial","value":"/home/zhi/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.0.0/src/tutorial.rs","parent":null,"children":[],"decl_id":null,"docs":"A tutorial for handling CSV data in Rust.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1804},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":329505,"byte_end":329518,"line_start":28,"line_end":28,"column_start":12,"column_end":25},"name":"WriterBuilder","qualname":"::writer::WriterBuilder","value":"WriterBuilder {  }","parent":null,"children":[{"krate":0,"index":847},{"krate":0,"index":849},{"krate":0,"index":851},{"krate":0,"index":853}],"decl_id":null,"docs":" Builds a CSV writer with various configuration knobs.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1494},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":330644,"byte_end":330647,"line_start":71,"line_end":71,"column_start":12,"column_end":15},"name":"new","qualname":"<WriterBuilder>::new","value":"fn () -> WriterBuilder","parent":null,"children":[],"decl_id":null,"docs":" Create a new builder for configuring CSV writing.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1496},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":331475,"byte_end":331484,"line_start":98,"line_end":98,"column_start":12,"column_end":21},"name":"from_path","qualname":"<WriterBuilder>::from_path","value":"fn <P> (&self, path: P) -> Result<Writer<File>>","parent":null,"children":[],"decl_id":null,"docs":" Build a CSV writer from this configuration that writes data to the\n given file path. The file is truncated if it already exists.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1498},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":332407,"byte_end":332418,"line_start":126,"line_end":126,"column_start":12,"column_end":23},"name":"from_writer","qualname":"<WriterBuilder>::from_writer","value":"fn <W> (&self, wtr: W) -> Writer<W>","parent":null,"children":[],"decl_id":null,"docs":" Build a CSV writer from this configuration that writes data to `wtr`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1500},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":333223,"byte_end":333232,"line_start":155,"line_end":155,"column_start":12,"column_end":21},"name":"delimiter","qualname":"<WriterBuilder>::delimiter","value":"fn (&mut self, delimiter: u8) -> &mut WriterBuilder","parent":null,"children":[],"decl_id":null,"docs":" The field delimiter to use when writing CSV.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1502},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":336333,"byte_end":336344,"line_start":247,"line_end":247,"column_start":12,"column_end":23},"name":"has_headers","qualname":"<WriterBuilder>::has_headers","value":"fn (&mut self, yes: bool) -> &mut WriterBuilder","parent":null,"children":[],"decl_id":null,"docs":" Whether to write a header row before writing any other row.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1504},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":338362,"byte_end":338370,"line_start":309,"line_end":309,"column_start":12,"column_end":20},"name":"flexible","qualname":"<WriterBuilder>::flexible","value":"fn (&mut self, yes: bool) -> &mut WriterBuilder","parent":null,"children":[],"decl_id":null,"docs":" Whether the number of fields in records is allowed to change or not.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1506},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":339498,"byte_end":339508,"line_start":344,"line_end":344,"column_start":12,"column_end":22},"name":"terminator","qualname":"<WriterBuilder>::terminator","value":"fn (&mut self, term: Terminator) -> &mut WriterBuilder","parent":null,"children":[],"decl_id":null,"docs":" The record terminator to use when writing CSV.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1508},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":341602,"byte_end":341613,"line_start":408,"line_end":408,"column_start":12,"column_end":23},"name":"quote_style","qualname":"<WriterBuilder>::quote_style","value":"fn (&mut self, style: QuoteStyle) -> &mut WriterBuilder","parent":null,"children":[],"decl_id":null,"docs":" The quoting style to use when writing CSV.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1510},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":342498,"byte_end":342503,"line_start":438,"line_end":438,"column_start":12,"column_end":17},"name":"quote","qualname":"<WriterBuilder>::quote","value":"fn (&mut self, quote: u8) -> &mut WriterBuilder","parent":null,"children":[],"decl_id":null,"docs":" The quote character to use when writing CSV.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1512},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":343440,"byte_end":343452,"line_start":469,"line_end":469,"column_start":12,"column_end":24},"name":"double_quote","qualname":"<WriterBuilder>::double_quote","value":"fn (&mut self, yes: bool) -> &mut WriterBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable double quote escapes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1514},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":344588,"byte_end":344594,"line_start":504,"line_end":504,"column_start":12,"column_end":18},"name":"escape","qualname":"<WriterBuilder>::escape","value":"fn (&mut self, escape: u8) -> &mut WriterBuilder","parent":null,"children":[],"decl_id":null,"docs":" The escape character to use when writing CSV.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1516},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":344840,"byte_end":344855,"line_start":511,"line_end":511,"column_start":12,"column_end":27},"name":"buffer_capacity","qualname":"<WriterBuilder>::buffer_capacity","value":"fn (&mut self, capacity: usize) -> &mut WriterBuilder","parent":null,"children":[],"decl_id":null,"docs":" Set the capacity (in bytes) of the internal buffer used in the CSV\n writer. This defaults to a reasonable setting.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1810},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":346226,"byte_end":346232,"line_start":544,"line_end":544,"column_start":12,"column_end":18},"name":"Writer","qualname":"::writer::Writer","value":"Writer {  }","parent":null,"children":[{"krate":0,"index":855},{"krate":0,"index":857},{"krate":0,"index":859},{"krate":0,"index":861}],"decl_id":null,"docs":" A already configured CSV writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1524},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":348980,"byte_end":348989,"line_start":629,"line_end":629,"column_start":12,"column_end":21},"name":"from_path","qualname":"<Writer<File>>::from_path","value":"fn <P> (path: P) -> Result<Writer<File>>","parent":null,"children":[],"decl_id":null,"docs":" Build a CSV writer with a default configuration that writes data to the\n given file path. The file is truncated if it already exists.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1530},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":350610,"byte_end":350621,"line_start":684,"line_end":684,"column_start":12,"column_end":23},"name":"from_writer","qualname":"<Writer<W>>::from_writer","value":"fn (wtr: W) -> Writer<W>","parent":null,"children":[],"decl_id":null,"docs":" Build a CSV writer with a default configuration that writes data to\n `wtr`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1532},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":358366,"byte_end":358375,"line_start":902,"line_end":902,"column_start":12,"column_end":21},"name":"serialize","qualname":"<Writer<W>>::serialize","value":"fn <S> (&mut self, record: S) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Serialize a single record using Serde.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1534},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":359837,"byte_end":359849,"line_start":945,"line_end":945,"column_start":12,"column_end":24},"name":"write_record","qualname":"<Writer<W>>::write_record","value":"fn <I, T> (&mut self, record: I) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Write a single record.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1536},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":361331,"byte_end":361348,"line_start":987,"line_end":987,"column_start":12,"column_end":29},"name":"write_byte_record","qualname":"<Writer<W>>::write_byte_record","value":"fn (&mut self, record: &ByteRecord) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Write a single `ByteRecord`.","sig":null,"attributes":[{"value":"inline(never)","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":361303,"byte_end":361319,"line_start":986,"line_end":986,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1538},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":364813,"byte_end":364824,"line_start":1076,"line_end":1076,"column_start":12,"column_end":23},"name":"write_field","qualname":"<Writer<W>>::write_field","value":"fn <T> (&mut self, field: T) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Write a single field.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1542},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":365992,"byte_end":365997,"line_start":1110,"line_end":1110,"column_start":12,"column_end":17},"name":"flush","qualname":"<Writer<W>>::flush","value":"fn (&mut self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Flush the contents of the internal buffer to the underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1544},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":366395,"byte_end":366405,"line_start":1122,"line_end":1122,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Writer<W>>::into_inner","value":"fn (mut self) -> result::Result<W, IntoInnerError<Writer<W>>>","parent":null,"children":[],"decl_id":null,"docs":" Flush the contents of the internal buffer and return the underlying\n writer.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":889},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4912,"byte_end":4918,"line_start":211,"line_end":211,"column_start":5,"column_end":11},"name":"Always","qualname":"::QuoteStyle::Always","value":"QuoteStyle::Always","parent":{"krate":0,"index":1834},"children":[],"decl_id":null,"docs":" This puts quotes around every field. Always.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":891},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5253,"byte_end":5262,"line_start":219,"line_end":219,"column_start":5,"column_end":14},"name":"Necessary","qualname":"::QuoteStyle::Necessary","value":"QuoteStyle::Necessary","parent":{"krate":0,"index":1834},"children":[],"decl_id":null,"docs":" This puts quotes around fields only when necessary.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":893},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5492,"byte_end":5502,"line_start":223,"line_end":223,"column_start":5,"column_end":15},"name":"NonNumeric","qualname":"::QuoteStyle::NonNumeric","value":"QuoteStyle::NonNumeric","parent":{"krate":0,"index":1834},"children":[],"decl_id":null,"docs":" This puts quotes around all fields that are non-numeric. Namely, when\n writing a field that does not parse as a valid float or integer, then\n quotes will be used even if they aren't strictly necessary.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":895},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5587,"byte_end":5592,"line_start":225,"line_end":225,"column_start":5,"column_end":10},"name":"Never","qualname":"::QuoteStyle::Never","value":"QuoteStyle::Never","parent":{"krate":0,"index":1834},"children":[],"decl_id":null,"docs":" This *never* writes quotes, even if it would produce invalid CSV data.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":897},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5872,"byte_end":5887,"line_start":232,"line_end":232,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::QuoteStyle::__Nonexhaustive","value":"QuoteStyle::__Nonexhaustive","parent":{"krate":0,"index":1834},"children":[],"decl_id":null,"docs":" Hints that destructuring should not be exhaustive.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1834},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4842,"byte_end":4852,"line_start":209,"line_end":209,"column_start":10,"column_end":20},"name":"QuoteStyle","qualname":"::QuoteStyle","value":"QuoteStyle::{Always, Necessary, NonNumeric, Never, __Nonexhaustive}","parent":null,"children":[{"krate":0,"index":889},{"krate":0,"index":891},{"krate":0,"index":893},{"krate":0,"index":895},{"krate":0,"index":897}],"decl_id":null,"docs":" The quoting style to use when writing CSV data.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4833,"byte_end":5890,"line_start":209,"line_end":233,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":899},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6707,"byte_end":6711,"line_start":260,"line_end":260,"column_start":5,"column_end":9},"name":"CRLF","qualname":"::Terminator::CRLF","value":"Terminator::CRLF","parent":{"krate":0,"index":1846},"children":[],"decl_id":null,"docs":" Parses `\\r`, `\\n` or `\\r\\n` as a single record terminator.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":901},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6771,"byte_end":6774,"line_start":262,"line_end":262,"column_start":5,"column_end":8},"name":"Any","qualname":"::Terminator::Any","value":"Terminator::Any(u8)","parent":{"krate":0,"index":1846},"children":[],"decl_id":null,"docs":" Parses the byte given as a record terminator.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":905},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7058,"byte_end":7073,"line_start":269,"line_end":269,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::Terminator::__Nonexhaustive","value":"Terminator::__Nonexhaustive","parent":{"krate":0,"index":1846},"children":[],"decl_id":null,"docs":" Hints that destructuring should not be exhaustive.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1846},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6623,"byte_end":6633,"line_start":258,"line_end":258,"column_start":10,"column_end":20},"name":"Terminator","qualname":"::Terminator","value":"Terminator::{CRLF, Any, __Nonexhaustive}","parent":null,"children":[{"krate":0,"index":899},{"krate":0,"index":901},{"krate":0,"index":905}],"decl_id":null,"docs":" A record terminator.","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6614,"byte_end":7076,"line_start":258,"line_end":270,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":907},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7682,"byte_end":7686,"line_start":293,"line_end":293,"column_start":5,"column_end":9},"name":"None","qualname":"::Trim::None","value":"Trim::None","parent":{"krate":0,"index":1858},"children":[],"decl_id":null,"docs":" Preserves fields and headers. This is the default.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":909},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7730,"byte_end":7737,"line_start":295,"line_end":295,"column_start":5,"column_end":12},"name":"Headers","qualname":"::Trim::Headers","value":"Trim::Headers","parent":{"krate":0,"index":1858},"children":[],"decl_id":null,"docs":" Trim whitespace from headers.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":911},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7797,"byte_end":7803,"line_start":297,"line_end":297,"column_start":5,"column_end":11},"name":"Fields","qualname":"::Trim::Fields","value":"Trim::Fields","parent":{"krate":0,"index":1858},"children":[],"decl_id":null,"docs":" Trim whitespace from fields, but not headers.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":913},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7858,"byte_end":7861,"line_start":299,"line_end":299,"column_start":5,"column_end":8},"name":"All","qualname":"::Trim::All","value":"Trim::All","parent":{"krate":0,"index":1858},"children":[],"decl_id":null,"docs":" Trim whitespace from fields and headers.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":915},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8141,"byte_end":8156,"line_start":306,"line_end":306,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::Trim::__Nonexhaustive","value":"Trim::__Nonexhaustive","parent":{"krate":0,"index":1858},"children":[],"decl_id":null,"docs":" Hints that destructuring should not be exhaustive.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1858},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7612,"byte_end":7616,"line_start":291,"line_end":291,"column_start":10,"column_end":14},"name":"Trim","qualname":"::Trim","value":"Trim::{None, Headers, Fields, All, __Nonexhaustive}","parent":null,"children":[{"krate":0,"index":907},{"krate":0,"index":909},{"krate":0,"index":911},{"krate":0,"index":913},{"krate":0,"index":915}],"decl_id":null,"docs":" The whitespace preservation behaviour when reading CSV data.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7603,"byte_end":8159,"line_start":291,"line_end":307,"column_start":1,"column_end":2}}]},{"kind":"Function","id":{"krate":0,"index":1590},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10563,"byte_end":10577,"line_start":383,"line_end":383,"column_start":8,"column_end":22},"name":"invalid_option","qualname":"::invalid_option","value":"fn <'de, D, T> (de: D) -> result::Result<Option<T>, D::Error>","parent":null,"children":[],"decl_id":null,"docs":" A custom Serde deserializer for possibly invalid `Option<T>` fields.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":14054,"byte_end":14064,"line_start":104,"line_end":104,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":14210,"byte_end":14220,"line_start":110,"line_end":110,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":14479,"byte_end":14489,"line_start":122,"line_end":122,"column_start":41,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":14719,"byte_end":14729,"line_start":134,"line_end":134,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":15769,"byte_end":15779,"line_start":164,"line_end":164,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":148}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":15869,"byte_end":15879,"line_start":171,"line_end":171,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":152},{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":158},{"krate":0,"index":160},{"krate":0,"index":162},{"krate":0,"index":164},{"krate":0,"index":166},{"krate":0,"index":168},{"krate":0,"index":170},{"krate":0,"index":172},{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":178},{"krate":0,"index":180},{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":28971,"byte_end":28979,"line_start":611,"line_end":611,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":186},{"krate":0,"index":188},{"krate":0,"index":190},{"krate":0,"index":192},{"krate":0,"index":194},{"krate":0,"index":196},{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":30601,"byte_end":30607,"line_start":663,"line_end":663,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":202}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":30700,"byte_end":30706,"line_start":670,"line_end":670,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":206},{"krate":0,"index":208},{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":214},{"krate":0,"index":216},{"krate":0,"index":218}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":32404,"byte_end":32414,"line_start":733,"line_end":733,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":222},{"krate":0,"index":224}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":32550,"byte_end":32560,"line_start":739,"line_end":739,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":228}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":32696,"byte_end":32706,"line_start":744,"line_end":744,"column_start":39,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":232}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":32850,"byte_end":32860,"line_start":751,"line_end":751,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":236}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":33002,"byte_end":33012,"line_start":758,"line_end":758,"column_start":42,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":240}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":33228,"byte_end":33238,"line_start":767,"line_end":767,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":244}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":34389,"byte_end":34403,"line_start":809,"line_end":809,"column_start":32,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":34434,"byte_end":34448,"line_start":811,"line_end":811,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":260},{"krate":0,"index":262},{"krate":0,"index":264},{"krate":0,"index":266}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":35100,"byte_end":35114,"line_start":839,"line_end":839,"column_start":34,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":270}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":47432,"byte_end":47444,"line_start":103,"line_end":103,"column_start":44,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":360},{"krate":0,"index":362},{"krate":0,"index":364},{"krate":0,"index":366},{"krate":0,"index":368},{"krate":0,"index":370},{"krate":0,"index":372},{"krate":0,"index":374}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":48643,"byte_end":48657,"line_start":156,"line_end":156,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":380},{"krate":0,"index":382},{"krate":0,"index":384},{"krate":0,"index":386},{"krate":0,"index":388},{"krate":0,"index":390},{"krate":0,"index":392},{"krate":0,"index":394}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":50692,"byte_end":50704,"line_start":232,"line_end":232,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":400},{"krate":0,"index":402},{"krate":0,"index":404},{"krate":0,"index":406},{"krate":0,"index":408},{"krate":0,"index":410},{"krate":0,"index":412},{"krate":0,"index":414}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":62617,"byte_end":62633,"line_start":655,"line_end":655,"column_start":21,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":500}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":62835,"byte_end":62851,"line_start":664,"line_end":664,"column_start":19,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":504}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":62953,"byte_end":62969,"line_start":670,"line_end":670,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":508}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":63226,"byte_end":63246,"line_start":680,"line_end":680,"column_start":23,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":512}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":63835,"byte_end":63851,"line_start":698,"line_end":698,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":518},{"krate":0,"index":520}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":64122,"byte_end":64142,"line_start":710,"line_end":710,"column_start":6,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":524}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":75780,"byte_end":75785,"line_start":30,"line_end":30,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":566},{"krate":0,"index":568},{"krate":0,"index":570}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":78305,"byte_end":78310,"line_start":104,"line_end":104,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":574}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":78424,"byte_end":78429,"line_start":110,"line_end":110,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":578}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":78548,"byte_end":78553,"line_start":116,"line_end":116,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":582},{"krate":0,"index":584}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":79514,"byte_end":79519,"line_start":142,"line_end":142,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":588}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":82105,"byte_end":82118,"line_start":210,"line_end":210,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":594},{"krate":0,"index":596}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":82419,"byte_end":82432,"line_start":222,"line_end":222,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":600}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":82545,"byte_end":82558,"line_start":228,"line_end":228,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":604},{"krate":0,"index":606}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":83361,"byte_end":83370,"line_start":253,"line_end":253,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":612},{"krate":0,"index":614}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":83654,"byte_end":83663,"line_start":260,"line_end":260,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":618}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":83759,"byte_end":83768,"line_start":264,"line_end":264,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":622}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":84626,"byte_end":84640,"line_start":294,"line_end":294,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":630},{"krate":0,"index":632}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":85143,"byte_end":85157,"line_start":311,"line_end":311,"column_start":39,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":636},{"krate":0,"index":638}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":85339,"byte_end":85353,"line_start":321,"line_end":321,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":642}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":85474,"byte_end":85488,"line_start":327,"line_end":327,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":646}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":93887,"byte_end":93900,"line_start":36,"line_end":36,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":708}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":94178,"byte_end":94191,"line_start":48,"line_end":48,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":712},{"krate":0,"index":714},{"krate":0,"index":716},{"krate":0,"index":718},{"krate":0,"index":720},{"krate":0,"index":722},{"krate":0,"index":724},{"krate":0,"index":726},{"krate":0,"index":728},{"krate":0,"index":730},{"krate":0,"index":732},{"krate":0,"index":734},{"krate":0,"index":736},{"krate":0,"index":738},{"krate":0,"index":740},{"krate":0,"index":742}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":119387,"byte_end":119393,"line_start":795,"line_end":795,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":746}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":120190,"byte_end":120196,"line_start":824,"line_end":824,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":750},{"krate":0,"index":752},{"krate":0,"index":754},{"krate":0,"index":756},{"krate":0,"index":758},{"krate":0,"index":760},{"krate":0,"index":762},{"krate":0,"index":764},{"krate":0,"index":766},{"krate":0,"index":768},{"krate":0,"index":770},{"krate":0,"index":772},{"krate":0,"index":774},{"krate":0,"index":776},{"krate":0,"index":778},{"krate":0,"index":780},{"krate":0,"index":784},{"krate":0,"index":786},{"krate":0,"index":788},{"krate":0,"index":790},{"krate":0,"index":792},{"krate":0,"index":794}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":154386,"byte_end":154392,"line_start":1814,"line_end":1814,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":798},{"krate":0,"index":800}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":158489,"byte_end":158500,"line_start":1922,"line_end":1922,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":804}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":159693,"byte_end":159719,"line_start":1956,"line_end":1956,"column_start":40,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":810},{"krate":0,"index":812},{"krate":0,"index":814},{"krate":0,"index":816}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":160606,"byte_end":160632,"line_start":1989,"line_end":1989,"column_start":18,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":820},{"krate":0,"index":822}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":161438,"byte_end":161460,"line_start":2015,"line_end":2015,"column_start":44,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":828},{"krate":0,"index":830},{"krate":0,"index":832}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":162222,"byte_end":162244,"line_start":2043,"line_end":2043,"column_start":18,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":836},{"krate":0,"index":838}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":162697,"byte_end":162718,"line_start":2062,"line_end":2062,"column_start":19,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":844},{"krate":0,"index":846},{"krate":0,"index":848},{"krate":0,"index":850}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":163293,"byte_end":163314,"line_start":2083,"line_end":2083,"column_start":32,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":854},{"krate":0,"index":856}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":163872,"byte_end":163889,"line_start":2104,"line_end":2104,"column_start":23,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":862},{"krate":0,"index":864},{"krate":0,"index":866}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":164343,"byte_end":164360,"line_start":2120,"line_end":2120,"column_start":36,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":870},{"krate":0,"index":872}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":164807,"byte_end":164826,"line_start":2138,"line_end":2138,"column_start":19,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":878},{"krate":0,"index":880},{"krate":0,"index":882},{"krate":0,"index":884}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":165395,"byte_end":165414,"line_start":2159,"line_end":2159,"column_start":32,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":888},{"krate":0,"index":890}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":165971,"byte_end":165986,"line_start":2180,"line_end":2180,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":896},{"krate":0,"index":898},{"krate":0,"index":900}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":166434,"byte_end":166449,"line_start":2196,"line_end":2196,"column_start":36,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":904},{"krate":0,"index":906}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":190909,"byte_end":190914,"line_start":329,"line_end":329,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1102}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":195025,"byte_end":195033,"line_start":423,"line_end":423,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1116},{"krate":0,"index":1118},{"krate":0,"index":1122},{"krate":0,"index":1126}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":220209,"byte_end":220221,"line_start":69,"line_end":69,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1326}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":220369,"byte_end":220381,"line_start":75,"line_end":75,"column_start":44,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1330}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":220674,"byte_end":220686,"line_start":87,"line_end":87,"column_start":41,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1338}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":220950,"byte_end":220962,"line_start":99,"line_end":99,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1346}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":221153,"byte_end":221165,"line_start":106,"line_end":106,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1350}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":221259,"byte_end":221271,"line_start":113,"line_end":113,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1354},{"krate":0,"index":1356},{"krate":0,"index":1358},{"krate":0,"index":1360},{"krate":0,"index":1362},{"krate":0,"index":1364},{"krate":0,"index":1366},{"krate":0,"index":1368},{"krate":0,"index":1370},{"krate":0,"index":1372},{"krate":0,"index":1374},{"krate":0,"index":1376},{"krate":0,"index":1378},{"krate":0,"index":1380},{"krate":0,"index":1382},{"krate":0,"index":1384},{"krate":0,"index":1386},{"krate":0,"index":1388},{"krate":0,"index":1390}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":237732,"byte_end":237744,"line_start":650,"line_end":650,"column_start":28,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1394},{"krate":0,"index":1396}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":237887,"byte_end":237899,"line_start":656,"line_end":656,"column_start":38,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1400}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":238057,"byte_end":238069,"line_start":663,"line_end":663,"column_start":43,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1404}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":238214,"byte_end":238226,"line_start":670,"line_end":670,"column_start":41,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1408}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":238445,"byte_end":238457,"line_start":679,"line_end":679,"column_start":35,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1412}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":239085,"byte_end":239101,"line_start":704,"line_end":704,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1426},{"krate":0,"index":1428},{"krate":0,"index":1430},{"krate":0,"index":1432}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":239566,"byte_end":239582,"line_start":726,"line_end":726,"column_start":34,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1436}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":329637,"byte_end":329650,"line_start":35,"line_end":35,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1490}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":329883,"byte_end":329896,"line_start":46,"line_end":46,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1494},{"krate":0,"index":1496},{"krate":0,"index":1498},{"krate":0,"index":1500},{"krate":0,"index":1502},{"krate":0,"index":1504},{"krate":0,"index":1506},{"krate":0,"index":1508},{"krate":0,"index":1510},{"krate":0,"index":1512},{"krate":0,"index":1514},{"krate":0,"index":1516}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":348063,"byte_end":348069,"line_start":597,"line_end":597,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1520}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":348214,"byte_end":348220,"line_start":605,"line_end":605,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1524}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":349114,"byte_end":349120,"line_start":634,"line_end":634,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1528},{"krate":0,"index":1530},{"krate":0,"index":1532},{"krate":0,"index":1534},{"krate":0,"index":1536},{"krate":0,"index":1538},{"krate":0,"index":1540},{"krate":0,"index":1542},{"krate":0,"index":1544},{"krate":0,"index":1546},{"krate":0,"index":1548},{"krate":0,"index":1550},{"krate":0,"index":1552}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":368905,"byte_end":368911,"line_start":1201,"line_end":1201,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1556},{"krate":0,"index":1558},{"krate":0,"index":1560},{"krate":0,"index":1562}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5897,"byte_end":5907,"line_start":235,"line_end":235,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1566}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6315,"byte_end":6325,"line_start":247,"line_end":247,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1570}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7083,"byte_end":7093,"line_start":272,"line_end":272,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1574}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7417,"byte_end":7427,"line_start":283,"line_end":283,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1578}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8166,"byte_end":8170,"line_start":309,"line_end":309,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":1582},{"krate":0,"index":1584}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8398,"byte_end":8402,"line_start":319,"line_end":319,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1588}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4663,"byte_end":4671,"line_start":200,"line_end":200,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":648}},{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4728,"byte_end":4736,"line_start":204,"line_end":204,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1438}}],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":14054,"byte_end":14064,"line_start":104,"line_end":104,"column_start":20,"column_end":30},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":1592},"to":{"krate":2,"index":2418}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":14210,"byte_end":14220,"line_start":110,"line_end":110,"column_start":44,"column_end":54},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":1592},"to":{"krate":2,"index":2418}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":14479,"byte_end":14489,"line_start":122,"line_end":122,"column_start":41,"column_end":51},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":1592},"to":{"krate":2,"index":2418}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":14719,"byte_end":14729,"line_start":134,"line_end":134,"column_start":21,"column_end":31},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":1592},"to":{"krate":2,"index":7716}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":15769,"byte_end":15779,"line_start":164,"line_end":164,"column_start":18,"column_end":28},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":1592},"to":{"krate":2,"index":2640}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":15869,"byte_end":15879,"line_start":171,"line_end":171,"column_start":6,"column_end":16},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":1592},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":28971,"byte_end":28979,"line_start":611,"line_end":611,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":1622},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":30601,"byte_end":30607,"line_start":663,"line_end":663,"column_start":18,"column_end":24},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":1642},"to":{"krate":2,"index":2640}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":30700,"byte_end":30706,"line_start":670,"line_end":670,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":0,"index":1642},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":32404,"byte_end":32414,"line_start":733,"line_end":733,"column_start":28,"column_end":38},"kind":{"variant":"Impl","fields":[9]},"from":{"krate":0,"index":1592},"to":{"krate":2,"index":2106}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":32550,"byte_end":32560,"line_start":739,"line_end":739,"column_start":29,"column_end":39},"kind":{"variant":"Impl","fields":[10]},"from":{"krate":0,"index":1592},"to":{"krate":2,"index":2660}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":32696,"byte_end":32706,"line_start":744,"line_end":744,"column_start":39,"column_end":49},"kind":{"variant":"Impl","fields":[11]},"from":{"krate":0,"index":1592},"to":{"krate":2,"index":2660}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":32850,"byte_end":32860,"line_start":751,"line_end":751,"column_start":44,"column_end":54},"kind":{"variant":"Impl","fields":[12]},"from":{"krate":0,"index":1592},"to":{"krate":2,"index":2660}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":33002,"byte_end":33012,"line_start":758,"line_end":758,"column_start":42,"column_end":52},"kind":{"variant":"Impl","fields":[13]},"from":{"krate":0,"index":1592},"to":{"krate":2,"index":4228}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":33228,"byte_end":33238,"line_start":767,"line_end":767,"column_start":36,"column_end":46},"kind":{"variant":"Impl","fields":[14]},"from":{"krate":0,"index":1592},"to":{"krate":2,"index":4248}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":34389,"byte_end":34403,"line_start":809,"line_end":809,"column_start":32,"column_end":46},"kind":{"variant":"Impl","fields":[15]},"from":{"krate":0,"index":246},"to":{"krate":2,"index":4266}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":34434,"byte_end":34448,"line_start":811,"line_end":811,"column_start":23,"column_end":37},"kind":{"variant":"Impl","fields":[16]},"from":{"krate":0,"index":246},"to":{"krate":2,"index":3842}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,98,121,116,101,95,114,101,99,111,114,100,46,114,115],"byte_start":35100,"byte_end":35114,"line_start":839,"line_end":839,"column_start":34,"column_end":48},"kind":{"variant":"Impl","fields":[17]},"from":{"krate":0,"index":246},"to":{"krate":2,"index":4252}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":47432,"byte_end":47444,"line_start":103,"line_end":103,"column_start":44,"column_end":56},"kind":{"variant":"Impl","fields":[18]},"from":{"krate":0,"index":356},"to":{"krate":0,"index":338}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":48643,"byte_end":48657,"line_start":156,"line_end":156,"column_start":27,"column_end":41},"kind":{"variant":"Impl","fields":[19]},"from":{"krate":0,"index":376},"to":{"krate":0,"index":338}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":50692,"byte_end":50704,"line_start":232,"line_end":232,"column_start":27,"column_end":39},"kind":{"variant":"Impl","fields":[20]},"from":{"krate":0,"index":396},"to":{"krate":0,"index":338}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":62617,"byte_end":62633,"line_start":655,"line_end":655,"column_start":21,"column_end":37},"kind":{"variant":"Impl","fields":[21]},"from":{"krate":0,"index":1678},"to":{"krate":13,"index":6986}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":62835,"byte_end":62851,"line_start":664,"line_end":664,"column_start":19,"column_end":35},"kind":{"variant":"Impl","fields":[22]},"from":{"krate":0,"index":1678},"to":{"krate":1,"index":2388}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":62953,"byte_end":62969,"line_start":670,"line_end":670,"column_start":23,"column_end":39},"kind":{"variant":"Impl","fields":[23]},"from":{"krate":0,"index":1678},"to":{"krate":2,"index":7720}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":63226,"byte_end":63246,"line_start":680,"line_end":680,"column_start":23,"column_end":43},"kind":{"variant":"Impl","fields":[24]},"from":{"krate":0,"index":1698},"to":{"krate":2,"index":7720}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":63835,"byte_end":63851,"line_start":698,"line_end":698,"column_start":6,"column_end":22},"kind":{"variant":"Impl","fields":[25]},"from":{"krate":0,"index":1678},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,100,101,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":64122,"byte_end":64142,"line_start":710,"line_end":710,"column_start":6,"column_end":26},"kind":{"variant":"Impl","fields":[26]},"from":{"krate":0,"index":1698},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":75780,"byte_end":75785,"line_start":30,"line_end":30,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[27]},"from":{"krate":0,"index":1718},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":78305,"byte_end":78310,"line_start":104,"line_end":104,"column_start":26,"column_end":31},"kind":{"variant":"Impl","fields":[28]},"from":{"krate":0,"index":1718},"to":{"krate":2,"index":2660}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":78424,"byte_end":78429,"line_start":110,"line_end":110,"column_start":26,"column_end":31},"kind":{"variant":"Impl","fields":[29]},"from":{"krate":1,"index":3702},"to":{"krate":2,"index":2660}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":78548,"byte_end":78553,"line_start":116,"line_end":116,"column_start":19,"column_end":24},"kind":{"variant":"Impl","fields":[30]},"from":{"krate":0,"index":1718},"to":{"krate":1,"index":2388}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":79514,"byte_end":79519,"line_start":142,"line_end":142,"column_start":23,"column_end":28},"kind":{"variant":"Impl","fields":[31]},"from":{"krate":0,"index":1718},"to":{"krate":2,"index":7720}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":82105,"byte_end":82118,"line_start":210,"line_end":210,"column_start":6,"column_end":19},"kind":{"variant":"Impl","fields":[32]},"from":{"krate":0,"index":1730},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":82419,"byte_end":82432,"line_start":222,"line_end":222,"column_start":23,"column_end":36},"kind":{"variant":"Impl","fields":[33]},"from":{"krate":0,"index":1730},"to":{"krate":2,"index":7720}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":82545,"byte_end":82558,"line_start":228,"line_end":228,"column_start":19,"column_end":32},"kind":{"variant":"Impl","fields":[34]},"from":{"krate":0,"index":1730},"to":{"krate":1,"index":2388}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":83361,"byte_end":83370,"line_start":253,"line_end":253,"column_start":6,"column_end":15},"kind":{"variant":"Impl","fields":[35]},"from":{"krate":0,"index":1750},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":83654,"byte_end":83663,"line_start":260,"line_end":260,"column_start":19,"column_end":28},"kind":{"variant":"Impl","fields":[36]},"from":{"krate":0,"index":1750},"to":{"krate":1,"index":2388}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":83759,"byte_end":83768,"line_start":264,"line_end":264,"column_start":23,"column_end":32},"kind":{"variant":"Impl","fields":[37]},"from":{"krate":0,"index":1750},"to":{"krate":2,"index":7720}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":84626,"byte_end":84640,"line_start":294,"line_end":294,"column_start":9,"column_end":23},"kind":{"variant":"Impl","fields":[38]},"from":{"krate":0,"index":624},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":85143,"byte_end":85157,"line_start":311,"line_end":311,"column_start":39,"column_end":53},"kind":{"variant":"Impl","fields":[39]},"from":{"krate":0,"index":624},"to":{"krate":1,"index":2388}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":85339,"byte_end":85353,"line_start":321,"line_end":321,"column_start":26,"column_end":40},"kind":{"variant":"Impl","fields":[40]},"from":{"krate":0,"index":624},"to":{"krate":2,"index":7720}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,101,114,114,111,114,46,114,115],"byte_start":85474,"byte_end":85488,"line_start":327,"line_end":327,"column_start":24,"column_end":38},"kind":{"variant":"Impl","fields":[41]},"from":{"krate":0,"index":624},"to":{"krate":2,"index":7716}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":93887,"byte_end":93900,"line_start":36,"line_end":36,"column_start":18,"column_end":31},"kind":{"variant":"Impl","fields":[42]},"from":{"krate":0,"index":1770},"to":{"krate":2,"index":2640}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":94178,"byte_end":94191,"line_start":48,"line_end":48,"column_start":6,"column_end":19},"kind":{"variant":"Impl","fields":[43]},"from":{"krate":0,"index":1770},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":119387,"byte_end":119393,"line_start":795,"line_end":795,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[44]},"from":{"krate":0,"index":1776},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":120190,"byte_end":120196,"line_start":824,"line_end":824,"column_start":19,"column_end":25},"kind":{"variant":"Impl","fields":[45]},"from":{"krate":0,"index":1776},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":154386,"byte_end":154392,"line_start":1814,"line_end":1814,"column_start":30,"column_end":36},"kind":{"variant":"Impl","fields":[46]},"from":{"krate":0,"index":1776},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":158489,"byte_end":158500,"line_start":1922,"line_end":1922,"column_start":6,"column_end":17},"kind":{"variant":"Impl","fields":[47]},"from":{"krate":0,"index":1782},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":159693,"byte_end":159719,"line_start":1956,"line_end":1956,"column_start":40,"column_end":66},"kind":{"variant":"Impl","fields":[48]},"from":{"krate":0,"index":806},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":160606,"byte_end":160632,"line_start":1989,"line_end":1989,"column_start":18,"column_end":44},"kind":{"variant":"Impl","fields":[49]},"from":{"krate":0,"index":806},"to":{"krate":2,"index":3842}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":161438,"byte_end":161460,"line_start":2015,"line_end":2015,"column_start":44,"column_end":66},"kind":{"variant":"Impl","fields":[50]},"from":{"krate":0,"index":824},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":162222,"byte_end":162244,"line_start":2043,"line_end":2043,"column_start":18,"column_end":40},"kind":{"variant":"Impl","fields":[51]},"from":{"krate":0,"index":824},"to":{"krate":2,"index":3842}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":162697,"byte_end":162718,"line_start":2062,"line_end":2062,"column_start":19,"column_end":40},"kind":{"variant":"Impl","fields":[52]},"from":{"krate":0,"index":840},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":163293,"byte_end":163314,"line_start":2083,"line_end":2083,"column_start":32,"column_end":53},"kind":{"variant":"Impl","fields":[53]},"from":{"krate":0,"index":840},"to":{"krate":2,"index":3842}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":163872,"byte_end":163889,"line_start":2104,"line_end":2104,"column_start":23,"column_end":40},"kind":{"variant":"Impl","fields":[54]},"from":{"krate":0,"index":858},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":164343,"byte_end":164360,"line_start":2120,"line_end":2120,"column_start":36,"column_end":53},"kind":{"variant":"Impl","fields":[55]},"from":{"krate":0,"index":858},"to":{"krate":2,"index":3842}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":164807,"byte_end":164826,"line_start":2138,"line_end":2138,"column_start":19,"column_end":38},"kind":{"variant":"Impl","fields":[56]},"from":{"krate":0,"index":874},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":165395,"byte_end":165414,"line_start":2159,"line_end":2159,"column_start":32,"column_end":51},"kind":{"variant":"Impl","fields":[57]},"from":{"krate":0,"index":874},"to":{"krate":2,"index":3842}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":165971,"byte_end":165986,"line_start":2180,"line_end":2180,"column_start":23,"column_end":38},"kind":{"variant":"Impl","fields":[58]},"from":{"krate":0,"index":892},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,114,101,97,100,101,114,46,114,115],"byte_start":166434,"byte_end":166449,"line_start":2196,"line_end":2196,"column_start":36,"column_end":51},"kind":{"variant":"Impl","fields":[59]},"from":{"krate":0,"index":892},"to":{"krate":2,"index":3842}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":190909,"byte_end":190914,"line_start":329,"line_end":329,"column_start":21,"column_end":26},"kind":{"variant":"Impl","fields":[60]},"from":{"krate":0,"index":1718},"to":{"krate":13,"index":7318}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,101,114,105,97,108,105,122,101,114,46,114,115],"byte_start":195025,"byte_end":195033,"line_start":423,"line_end":423,"column_start":24,"column_end":32},"kind":{"variant":"Impl","fields":[61]},"from":{"krate":0,"index":1112},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":220209,"byte_end":220221,"line_start":69,"line_end":69,"column_start":20,"column_end":32},"kind":{"variant":"Impl","fields":[62]},"from":{"krate":0,"index":1794},"to":{"krate":2,"index":2418}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":220369,"byte_end":220381,"line_start":75,"line_end":75,"column_start":44,"column_end":56},"kind":{"variant":"Impl","fields":[63]},"from":{"krate":0,"index":1794},"to":{"krate":2,"index":2418}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":220674,"byte_end":220686,"line_start":87,"line_end":87,"column_start":41,"column_end":53},"kind":{"variant":"Impl","fields":[64]},"from":{"krate":0,"index":1794},"to":{"krate":2,"index":2418}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":220950,"byte_end":220962,"line_start":99,"line_end":99,"column_start":21,"column_end":33},"kind":{"variant":"Impl","fields":[65]},"from":{"krate":0,"index":1794},"to":{"krate":2,"index":7716}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":221153,"byte_end":221165,"line_start":106,"line_end":106,"column_start":18,"column_end":30},"kind":{"variant":"Impl","fields":[66]},"from":{"krate":0,"index":1794},"to":{"krate":2,"index":2640}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":221259,"byte_end":221271,"line_start":113,"line_end":113,"column_start":6,"column_end":18},"kind":{"variant":"Impl","fields":[67]},"from":{"krate":0,"index":1794},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":237732,"byte_end":237744,"line_start":650,"line_end":650,"column_start":28,"column_end":40},"kind":{"variant":"Impl","fields":[68]},"from":{"krate":0,"index":1794},"to":{"krate":2,"index":2106}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":237887,"byte_end":237899,"line_start":656,"line_end":656,"column_start":38,"column_end":50},"kind":{"variant":"Impl","fields":[69]},"from":{"krate":0,"index":1794},"to":{"krate":2,"index":2660}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":238057,"byte_end":238069,"line_start":663,"line_end":663,"column_start":43,"column_end":55},"kind":{"variant":"Impl","fields":[70]},"from":{"krate":0,"index":1794},"to":{"krate":2,"index":2660}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":238214,"byte_end":238226,"line_start":670,"line_end":670,"column_start":41,"column_end":53},"kind":{"variant":"Impl","fields":[71]},"from":{"krate":0,"index":1794},"to":{"krate":2,"index":4228}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":238445,"byte_end":238457,"line_start":679,"line_end":679,"column_start":35,"column_end":47},"kind":{"variant":"Impl","fields":[72]},"from":{"krate":0,"index":1794},"to":{"krate":2,"index":4248}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":239085,"byte_end":239101,"line_start":704,"line_end":704,"column_start":23,"column_end":39},"kind":{"variant":"Impl","fields":[73]},"from":{"krate":0,"index":1422},"to":{"krate":2,"index":3842}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,115,116,114,105,110,103,95,114,101,99,111,114,100,46,114,115],"byte_start":239566,"byte_end":239582,"line_start":726,"line_end":726,"column_start":34,"column_end":50},"kind":{"variant":"Impl","fields":[74]},"from":{"krate":0,"index":1422},"to":{"krate":2,"index":4252}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":329637,"byte_end":329650,"line_start":35,"line_end":35,"column_start":18,"column_end":31},"kind":{"variant":"Impl","fields":[75]},"from":{"krate":0,"index":1804},"to":{"krate":2,"index":2640}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":329883,"byte_end":329896,"line_start":46,"line_end":46,"column_start":6,"column_end":19},"kind":{"variant":"Impl","fields":[76]},"from":{"krate":0,"index":1804},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":348063,"byte_end":348069,"line_start":597,"line_end":597,"column_start":29,"column_end":35},"kind":{"variant":"Impl","fields":[77]},"from":{"krate":0,"index":1810},"to":{"krate":2,"index":2040}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":348214,"byte_end":348220,"line_start":605,"line_end":605,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[78]},"from":{"krate":0,"index":1810},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":349114,"byte_end":349120,"line_start":634,"line_end":634,"column_start":20,"column_end":26},"kind":{"variant":"Impl","fields":[79]},"from":{"krate":0,"index":1810},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,119,114,105,116,101,114,46,114,115],"byte_start":368905,"byte_end":368911,"line_start":1201,"line_end":1201,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[80]},"from":{"krate":0,"index":1828},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5897,"byte_end":5907,"line_start":235,"line_end":235,"column_start":6,"column_end":16},"kind":{"variant":"Impl","fields":[81]},"from":{"krate":0,"index":1834},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6315,"byte_end":6325,"line_start":247,"line_end":247,"column_start":18,"column_end":28},"kind":{"variant":"Impl","fields":[82]},"from":{"krate":0,"index":1834},"to":{"krate":2,"index":2640}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7083,"byte_end":7093,"line_start":272,"line_end":272,"column_start":6,"column_end":16},"kind":{"variant":"Impl","fields":[83]},"from":{"krate":0,"index":1846},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7417,"byte_end":7427,"line_start":283,"line_end":283,"column_start":18,"column_end":28},"kind":{"variant":"Impl","fields":[84]},"from":{"krate":0,"index":1846},"to":{"krate":2,"index":2640}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8166,"byte_end":8170,"line_start":309,"line_end":309,"column_start":6,"column_end":10},"kind":{"variant":"Impl","fields":[85]},"from":{"krate":0,"index":1858},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,99,115,118,45,49,46,48,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8398,"byte_end":8402,"line_start":319,"line_end":319,"column_start":18,"column_end":22},"kind":{"variant":"Impl","fields":[86]},"from":{"krate":0,"index":1858},"to":{"krate":2,"index":2640}}]}