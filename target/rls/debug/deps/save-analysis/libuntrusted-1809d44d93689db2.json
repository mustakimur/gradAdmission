{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"prelude":{"crate_id":{"name":"untrusted","disambiguator":[758744355037116493,5215146412923585534]},"crate_root":"/home/zhi/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.5.1/src","external_crates":[{"file_name":"/home/zhi/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.5.1/src/untrusted.rs","num":1,"id":{"name":"core","disambiguator":[15868474213044323624,2444462643878075336]}},{"file_name":"/home/zhi/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.5.1/src/untrusted.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[8458891086083892067,8748117807113040734]}}],"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,116,114,117,115,116,101,100,45,48,46,53,46,49,47,115,114,99,47,117,110,116,114,117,115,116,101,100,46,114,115],"byte_start":770,"byte_end":15880,"line_start":15,"line_end":427,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,116,114,117,115,116,101,100,45,48,46,53,46,49,47,115,114,99,47,117,110,116,114,117,115,116,101,100,46,114,115],"byte_start":770,"byte_end":15880,"line_start":15,"line_end":427,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/zhi/.cargo/registry/src/github.com-1ecc6299db9ec823/untrusted-0.5.1/src/untrusted.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":72},{"krate":0,"index":90},{"krate":0,"index":88},{"krate":0,"index":84},{"krate":0,"index":80},{"krate":0,"index":74},{"krate":0,"index":8},{"krate":0,"index":24},{"krate":0,"index":28},{"krate":0,"index":94},{"krate":0,"index":96},{"krate":0,"index":30},{"krate":0,"index":32},{"krate":0,"index":100},{"krate":0,"index":116},{"krate":0,"index":114},{"krate":0,"index":110},{"krate":0,"index":106},{"krate":0,"index":102},{"krate":0,"index":52}],"decl_id":null,"docs":" untrusted.rs: Safe, fast, zero-panic, zero-crashing, zero-allocation\n parsing of untrusted inputs in Rust.","sig":null,"attributes":[{"value":"allow(missing_copy_implementations, missing_debug_implementations)","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,116,114,117,115,116,101,100,45,48,46,53,46,49,47,115,114,99,47,117,110,116,114,117,115,116,101,100,46,114,115],"byte_start":4944,"byte_end":5025,"line_start":88,"line_end":91,"column_start":1,"column_end":3}},{"value":"deny(unused_qualifications)","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,116,114,117,115,116,101,100,45,48,46,53,46,49,47,115,114,99,47,117,110,116,114,117,115,116,101,100,46,114,115],"byte_start":5098,"byte_end":5136,"line_start":94,"line_end":96,"column_start":1,"column_end":3}},{"value":"forbid(anonymous_parameters,\n         box_pointers,\n         fat_ptr_transmutes,\n         legacy_directory_ownership,\n         missing_docs,\n         trivial_casts,\n         trivial_numeric_casts,\n         unsafe_code,\n         unstable_features,\n         unused_extern_crates,\n         unused_import_braces,\n         unused_results,\n         variant_size_differences,\n         warnings)","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,116,114,117,115,116,101,100,45,48,46,53,46,49,47,115,114,99,47,117,110,116,114,117,115,116,101,100,46,114,115],"byte_start":5138,"byte_end":5471,"line_start":98,"line_end":113,"column_start":1,"column_end":3}},{"value":"no_std","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,116,114,117,115,116,101,100,45,48,46,53,46,49,47,115,114,99,47,117,110,116,114,117,115,116,101,100,46,114,115],"byte_start":5473,"byte_end":5483,"line_start":115,"line_end":115,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":72},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,116,114,117,115,116,101,100,45,48,46,53,46,49,47,115,114,99,47,117,110,116,114,117,115,116,101,100,46,114,115],"byte_start":5659,"byte_end":5664,"line_start":121,"line_end":121,"column_start":12,"column_end":17},"name":"Input","qualname":"::Input","value":"Input {  }","parent":null,"children":[{"krate":0,"index":59}],"decl_id":null,"docs":" A wrapper around `&'a [u8]` that helps in writing panic-free code.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,116,114,117,115,116,101,100,45,48,46,53,46,49,47,115,114,99,47,117,110,116,114,117,115,116,101,100,46,114,115],"byte_start":5648,"byte_end":5703,"line_start":121,"line_end":123,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,116,114,117,115,116,101,100,45,48,46,53,46,49,47,115,114,99,47,117,110,116,114,117,115,116,101,100,46,114,115],"byte_start":5648,"byte_end":5703,"line_start":121,"line_end":123,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":10},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,116,114,117,115,116,101,100,45,48,46,53,46,49,47,115,114,99,47,117,110,116,114,117,115,116,101,100,46,114,115],"byte_start":5798,"byte_end":5802,"line_start":127,"line_end":127,"column_start":12,"column_end":16},"name":"from","qualname":"<Input<'a>>::from","value":"fn (bytes: &'a [u8]) -> Input<'a>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Input` for the given input `bytes`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":12},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,116,114,117,115,116,101,100,45,48,46,53,46,49,47,115,114,99,47,117,110,116,114,117,115,116,101,100,46,114,115],"byte_start":6431,"byte_end":6439,"line_start":139,"line_end":139,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Input<'a>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the input is empty and false otherwise.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,116,114,117,115,116,101,100,45,48,46,53,46,49,47,115,114,99,47,117,110,116,114,117,115,116,101,100,46,114,115],"byte_start":6410,"byte_end":6419,"line_start":138,"line_end":138,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":14},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,116,114,117,115,116,101,100,45,48,46,53,46,49,47,115,114,99,47,117,110,116,114,117,115,116,101,100,46,114,115],"byte_start":6551,"byte_end":6555,"line_start":143,"line_end":143,"column_start":12,"column_end":16},"name":"iter","qualname":"<Input<'a>>::iter","value":"fn (&self) -> <&[u8] as IntoIterator>::IntoIter","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the input.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,116,114,117,115,116,101,100,45,48,46,53,46,49,47,115,114,99,47,117,110,116,114,117,115,116,101,100,46,114,115],"byte_start":6530,"byte_end":6539,"line_start":142,"line_end":142,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":16},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,116,114,117,115,116,101,100,45,48,46,53,46,49,47,115,114,99,47,117,110,116,114,117,115,116,101,100,46,114,115],"byte_start":6708,"byte_end":6711,"line_start":149,"line_end":149,"column_start":12,"column_end":15},"name":"len","qualname":"<Input<'a>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of the `Input`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,116,114,117,115,116,101,100,45,48,46,53,46,49,47,115,114,99,47,117,110,116,114,117,115,116,101,100,46,114,115],"byte_start":6687,"byte_end":6696,"line_start":148,"line_end":148,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,116,114,117,115,116,101,100,45,48,46,53,46,49,47,115,114,99,47,117,110,116,114,117,115,116,101,100,46,114,115],"byte_start":6958,"byte_end":6966,"line_start":154,"line_end":154,"column_start":12,"column_end":20},"name":"read_all","qualname":"<Input<'a>>::read_all","value":"fn <F, R, E> (&self, incomplete_read: E, read: F) -> Result<R, E>","parent":null,"children":[],"decl_id":null,"docs":" Calls `read` with the given input as a `Reader`, ensuring that `read`\n consumed the entire input. If `read` does not consume the entire input,\n `incomplete_read` is returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,116,114,117,115,116,101,100,45,48,46,53,46,49,47,115,114,99,47,117,110,116,114,117,115,116,101,100,46,114,115],"byte_start":7406,"byte_end":7418,"line_start":167,"line_end":167,"column_start":12,"column_end":24},"name":"read_all_mut","qualname":"<Input<'a>>::read_all_mut","value":"fn <F, R, E> (&self, incomplete_read: E, mut read: F) -> Result<R, E>","parent":null,"children":[],"decl_id":null,"docs":" Like `read_all`, except taking an `FnMut`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,116,114,117,115,116,101,100,45,48,46,53,46,49,47,115,114,99,47,117,110,116,114,117,115,116,101,100,46,114,115],"byte_start":8015,"byte_end":8033,"line_start":183,"line_end":183,"column_start":12,"column_end":30},"name":"as_slice_less_safe","qualname":"<Input<'a>>::as_slice_less_safe","value":"fn (&self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" Access the input as a slice so it can be processed by functions that\n are not written using the Input/Reader framework.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,116,114,117,115,116,101,100,45,48,46,53,46,49,47,115,114,99,47,117,110,116,114,117,115,116,101,100,46,114,115],"byte_start":7994,"byte_end":8003,"line_start":182,"line_end":182,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":28},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,116,114,117,115,116,101,100,45,48,46,53,46,49,47,115,114,99,47,117,110,116,114,117,115,116,101,100,46,114,115],"byte_start":8428,"byte_end":8445,"line_start":198,"line_end":198,"column_start":8,"column_end":25},"name":"read_all_optional","qualname":"::read_all_optional","value":"fn <'a, F, R, E> (input: Option<Input<'a>>, incomplete_read: E, read: F) -> Result<R, E>","parent":null,"children":[],"decl_id":null,"docs":" Calls `read` with the given input as a `Reader`, ensuring that `read`\n consumed the entire input. When `input` is `None`, `read` will be\n called with `None`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":94},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,116,114,117,115,116,101,100,45,48,46,53,46,49,47,115,114,99,47,117,110,116,114,117,115,116,101,100,46,114,115],"byte_start":9754,"byte_end":9760,"line_start":231,"line_end":231,"column_start":12,"column_end":18},"name":"Reader","qualname":"::Reader","value":"Reader {  }","parent":null,"children":[{"krate":0,"index":73},{"krate":0,"index":75}],"decl_id":null,"docs":" A read-only, forward-only* cursor into the data in an `Input`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":30},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,116,114,117,115,116,101,100,45,48,46,53,46,49,47,115,114,99,47,117,110,116,114,117,115,116,101,100,46,114,115],"byte_start":9884,"byte_end":9888,"line_start":237,"line_end":237,"column_start":12,"column_end":16},"name":"Mark","qualname":"::Mark","value":"Mark {  }","parent":null,"children":[{"krate":0,"index":45}],"decl_id":null,"docs":" An index into the already-parsed input of a `Reader`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,116,114,117,115,116,101,100,45,48,46,53,46,49,47,115,114,99,47,117,110,116,114,117,115,116,101,100,46,114,115],"byte_start":10121,"byte_end":10124,"line_start":246,"line_end":246,"column_start":12,"column_end":15},"name":"new","qualname":"<Reader<'a>>::new","value":"fn (input: Input<'a>) -> Reader<'a>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new Reader for the given input. Use `read_all`,\n `read_all_mut`, or `read_all_optional` instead of `Reader::new`\n whenever possible.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,116,114,117,115,116,101,100,45,48,46,53,46,49,47,115,114,99,47,117,110,116,114,117,115,116,101,100,46,114,115],"byte_start":10100,"byte_end":10109,"line_start":245,"line_end":245,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,116,114,117,115,116,101,100,45,48,46,53,46,49,47,115,114,99,47,117,110,116,114,117,115,116,101,100,46,114,115],"byte_start":10331,"byte_end":10337,"line_start":253,"line_end":253,"column_start":12,"column_end":18},"name":"at_end","qualname":"<Reader<'a>>::at_end","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the reader is at the end of the input, and `false`\n otherwise.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,116,114,117,115,116,101,100,45,48,46,53,46,49,47,115,114,99,47,117,110,116,114,117,115,116,101,100,46,114,115],"byte_start":10310,"byte_end":10319,"line_start":252,"line_end":252,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,116,114,117,115,116,101,100,45,48,46,53,46,49,47,115,114,99,47,117,110,116,114,117,115,116,101,100,46,114,115],"byte_start":10519,"byte_end":10542,"line_start":258,"line_end":258,"column_start":12,"column_end":35},"name":"get_input_between_marks","qualname":"<Reader<'a>>::get_input_between_marks","value":"fn (&self, mark1: Mark, mark2: Mark) -> Result<Input<'a>, EndOfInput>","parent":null,"children":[],"decl_id":null,"docs":" Returns an `Input` for already-parsed input that has had its boundaries\n marked using `mark`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,116,114,117,115,116,101,100,45,48,46,53,46,49,47,115,114,99,47,117,110,116,114,117,115,116,101,100,46,114,115],"byte_start":10498,"byte_end":10507,"line_start":257,"line_end":257,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,116,114,117,115,116,101,100,45,48,46,53,46,49,47,115,114,99,47,117,110,116,114,117,115,116,101,100,46,114,115],"byte_start":10938,"byte_end":10942,"line_start":268,"line_end":268,"column_start":12,"column_end":16},"name":"mark","qualname":"<Reader<'a>>::mark","value":"fn (&self) -> Mark","parent":null,"children":[],"decl_id":null,"docs":" Return the current position of the `Reader` for future use in a call\n to `get_input_between_marks`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,116,114,117,115,116,101,100,45,48,46,53,46,49,47,115,114,99,47,117,110,116,114,117,115,116,101,100,46,114,115],"byte_start":10917,"byte_end":10926,"line_start":267,"line_end":267,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,116,114,117,115,116,101,100,45,48,46,53,46,49,47,115,114,99,47,117,110,116,114,117,115,116,101,100,46,114,115],"byte_start":11124,"byte_end":11128,"line_start":272,"line_end":272,"column_start":12,"column_end":16},"name":"peek","qualname":"<Reader<'a>>::peek","value":"fn (&self, b: u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if there is at least one more byte in the input and that\n byte is equal to `b`, and false otherwise.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,116,114,117,115,116,101,100,45,48,46,53,46,49,47,115,114,99,47,117,110,116,114,117,115,116,101,100,46,114,115],"byte_start":11473,"byte_end":11482,"line_start":283,"line_end":283,"column_start":12,"column_end":21},"name":"read_byte","qualname":"<Reader<'a>>::read_byte","value":"fn (&mut self) -> Result<u8, EndOfInput>","parent":null,"children":[],"decl_id":null,"docs":" Reads the next input byte.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,116,114,117,115,116,101,100,45,48,46,53,46,49,47,115,114,99,47,117,110,116,114,117,115,116,101,100,46,114,115],"byte_start":11926,"byte_end":11930,"line_start":297,"line_end":297,"column_start":12,"column_end":16},"name":"skip","qualname":"<Reader<'a>>::skip","value":"fn (&mut self, num_bytes: usize) -> Result<(), EndOfInput>","parent":null,"children":[],"decl_id":null,"docs":" Skips `num_bytes` of the input.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,116,114,117,115,116,101,100,45,48,46,53,46,49,47,115,114,99,47,117,110,116,114,117,115,116,101,100,46,114,115],"byte_start":12295,"byte_end":12313,"line_start":305,"line_end":305,"column_start":12,"column_end":30},"name":"skip_and_get_input","qualname":"<Reader<'a>>::skip_and_get_input","value":"fn (&mut self, num_bytes: usize) -> Result<Input<'a>, EndOfInput>","parent":null,"children":[],"decl_id":null,"docs":" Skips `num_bytes` of the input, returning the skipped input as an `Input`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,116,114,117,115,116,101,100,45,48,46,53,46,49,47,115,114,99,47,117,110,116,114,117,115,116,101,100,46,114,115],"byte_start":12811,"byte_end":12822,"line_start":317,"line_end":317,"column_start":12,"column_end":23},"name":"skip_to_end","qualname":"<Reader<'a>>::skip_to_end","value":"fn (&mut self) -> Input<'a>","parent":null,"children":[],"decl_id":null,"docs":" Skips the reader to the end of the input, returning the skipped input\n as an `Input`.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":100},"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,116,114,117,115,116,101,100,45,48,46,53,46,49,47,115,114,99,47,117,110,116,114,117,115,116,101,100,46,114,115],"byte_start":13127,"byte_end":13137,"line_start":326,"line_end":326,"column_start":12,"column_end":22},"name":"EndOfInput","qualname":"::EndOfInput","value":"","parent":null,"children":[],"decl_id":null,"docs":" The error type used to indicate the end of the input was reached before the\n operation could be completed.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,116,114,117,115,116,101,100,45,48,46,53,46,49,47,115,114,99,47,117,110,116,114,117,115,116,101,100,46,114,115],"byte_start":13116,"byte_end":13138,"line_start":326,"line_end":326,"column_start":1,"column_end":23}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,116,114,117,115,116,101,100,45,48,46,53,46,49,47,115,114,99,47,117,110,116,114,117,115,116,101,100,46,114,115],"byte_start":13116,"byte_end":13138,"line_start":326,"line_end":326,"column_start":1,"column_end":23}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,116,114,117,115,116,101,100,45,48,46,53,46,49,47,115,114,99,47,117,110,116,114,117,115,116,101,100,46,114,115],"byte_start":5714,"byte_end":5719,"line_start":125,"line_end":125,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":22}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,116,114,117,115,116,101,100,45,48,46,53,46,49,47,115,114,99,47,117,110,116,114,117,115,116,101,100,46,114,115],"byte_start":8142,"byte_end":8147,"line_start":188,"line_end":188,"column_start":39,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":26}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,116,114,117,115,116,101,100,45,48,46,53,46,49,47,115,114,99,47,117,110,116,114,117,115,116,101,100,46,114,115],"byte_start":9916,"byte_end":9922,"line_start":241,"line_end":241,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":34},{"krate":0,"index":36},{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":48},{"krate":0,"index":50}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,116,114,117,115,116,101,100,45,48,46,53,46,49,47,115,114,99,47,117,110,116,114,117,115,116,101,100,46,114,115],"byte_start":13365,"byte_end":13370,"line_start":337,"line_end":337,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,116,114,117,115,116,101,100,45,48,46,53,46,49,47,115,114,99,47,117,110,116,114,117,115,116,101,100,46,114,115],"byte_start":5714,"byte_end":5719,"line_start":125,"line_end":125,"column_start":10,"column_end":15},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":72},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,116,114,117,115,116,101,100,45,48,46,53,46,49,47,115,114,99,47,117,110,116,114,117,115,116,101,100,46,114,115],"byte_start":8142,"byte_end":8147,"line_start":188,"line_end":188,"column_start":39,"column_end":44},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":72},"to":{"krate":1,"index":2418}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,116,114,117,115,116,101,100,45,48,46,53,46,49,47,115,114,99,47,117,110,116,114,117,115,116,101,100,46,114,115],"byte_start":9916,"byte_end":9922,"line_start":241,"line_end":241,"column_start":10,"column_end":16},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":94},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,122,104,105,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,117,110,116,114,117,115,116,101,100,45,48,46,53,46,49,47,115,114,99,47,117,110,116,114,117,115,116,101,100,46,114,115],"byte_start":13365,"byte_end":13370,"line_start":337,"line_end":337,"column_start":14,"column_end":19},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":120},"to":{"krate":4294967295,"index":4294967295}}]}